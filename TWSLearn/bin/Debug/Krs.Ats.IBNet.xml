<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Krs.Ats.IBNet</name>
    </assembly>
    <members>
        <member name="T:Krs.Ats.IBNet.Contracts.Equity">
            <summary>
            Equity Class - uses default constructors for creating an equity contract.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.Contract"/>
        </member>
        <member name="T:Krs.Ats.IBNet.Contract">
            <summary>
            Class to describe a financial security.
            </summary>
            <seealso href="http://www.interactivebrokers.com/php/apiUsersGuide/apiguide/java/contract.htm">Interactive Brokers Contract Documentation</seealso>
        </member>
        <member name="M:Krs.Ats.IBNet.Contract.#ctor">
            <summary>
             Undefined Contract Constructor
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.Contract.#ctor(System.String,System.String,Krs.Ats.IBNet.SecurityType,System.String,System.String)">
            <summary>
            Futures Contract Constructor
            </summary>
            <param name="symbol">This is the symbol of the underlying asset.</param>
            <param name="exchange">The order destination, such as Smart.</param>
            <param name="securityType">This is the security type.</param>
            <param name="currency">Specifies the currency.</param>
            <param name="expiry">The expiration date. Use the format YYYYMM.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.Contract.#ctor(System.String,System.String,Krs.Ats.IBNet.SecurityType,System.String)">
            <summary>
            Indice Contract Constructor
            </summary>
            <param name="symbol">This is the symbol of the underlying asset.</param>
            <param name="exchange">The order destination, such as Smart.</param>
            <param name="securityType">This is the security type.</param>
            <param name="currency">Specifies the currency.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.Contract.#ctor(System.Int32,System.String,Krs.Ats.IBNet.SecurityType,System.String,System.Double,Krs.Ats.IBNet.RightType,System.String,System.String,System.String,System.String,System.String,Krs.Ats.IBNet.SecurityIdType,System.String)">
            <summary>
            Default Contract Constructor
            </summary>
            <param name="contractId">The unique contract identifier.</param>
            <param name="symbol">This is the symbol of the underlying asset.</param>
            <param name="securityType">This is the security type.</param>
            <param name="expiry">The expiration date. Use the format YYYYMM.</param>
            <param name="strike">The strike price.</param>
            <param name="right">Specifies a Put or Call.</param>
            <param name="multiplier">Allows you to specify a future or option contract multiplier.
            This is only necessary when multiple possibilities exist.</param>
            <param name="exchange">The order destination, such as Smart.</param>
            <param name="currency">Specifies the currency.</param>
            <param name="localSymbol">This is the local exchange symbol of the underlying asset.</param>
            <param name="primaryExchange">Identifies the listing exchange for the contract (do not list SMART).</param>
            <param name="secIdType">Security identifier, when querying contract details or when placing orders.</param>
            <param name="secId">Unique identifier for the secIdType.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.Contract.#ctor(System.Int32)">
            <summary>
            Get a Contract by its unique contractId
            </summary>
            <param name="contractId"></param>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.Symbol">
            <summary>
            This is the symbol of the underlying asset.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.SecurityType">
            <summary>
            This is the security type.
            </summary>
            <remarks>Valid security types are:
            <list type="bullet">
            <item>Stock</item>
            <item>Option</item>
            <item>Future</item>
            <item>Indice</item>
            <item>Option on Future</item>
            <item>Cash</item>
            <item>Bag</item>
            <item>Bond</item>
            </list>
            </remarks>
            <seealso cref="T:Krs.Ats.IBNet.SecurityType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.Expiry">
            <summary>
            The expiration date. Use the format YYYYMM.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.Strike">
            <summary>
            The strike price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.Right">
            <summary>
            Specifies a Put or Call.
            </summary>
            <remarks>Valid values are:
            <list type="bullet">
            <item>Put - the right to sell a security.</item>
            <item>Call - the right to buy a security.</item>
            </list>
            </remarks>
            <seealso cref="T:Krs.Ats.IBNet.RightType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.Multiplier">
            <summary>
            Allows you to specify a future or option contract multiplier.
            This is only necessary when multiple possibilities exist.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.Exchange">
            <summary>
            The order destination, such as Smart.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.Currency">
            <summary>
            Specifies the currency.
            </summary>
            <remarks>
            Ambiguities may require that this field be specified,
            for example, when SMART is the exchange and IBM is being requested
            (IBM can trade in GBP or USD).  Given the existence of this kind of ambiguity,
            it is a good idea to always specify the currency.
            </remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.LocalSymbol">
            <summary>
            This is the local exchange symbol of the underlying asset.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.PrimaryExchange">
            <summary>
            Identifies the listing exchange for the contract (do not list SMART).
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.IncludeExpired">
            <summary>
            If set to true, contract details requests and historical data queries
            can be performed pertaining to expired contracts.
            
            Historical data queries on expired contracts are limited to the
            last year of the contracts life, and are initially only supported for
            expired futures contracts,
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.ComboLegsDescription">
            <summary>
            Description for combo legs
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.ComboLegs">
            <summary>
            Dynamic memory structure used to store the leg definitions for this contract.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.ContractId">
            <summary>
            The unique contract identifier.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.UnderlyingComponent">
            <summary>
            Underlying Component
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.SecIdType">
            <summary>
            Security identifier, when querying contract details or when placing orders. Supported identifiers are:
            ISIN (Example: Apple: US0378331005)
            CUSIP (Example: Apple: 037833100)
            SEDOL (Consists of 6-AN + check digit. Example: BAE: 0263494)
            RIC (Consists of exchange-independent RIC Root and a suffix identifying the exchange. Example: AAPL.O for Apple on NASDAQ.)
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Contract.SecId">
            <summary>
            Unique identifier for the secIdType.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Equity.#ctor(System.String)">
            <summary>
            Create an Equity Contract for Smart Exchanges
            </summary>
            <param name="symbol">Symbol of the equity contract. See <see cref="P:Krs.Ats.IBNet.Contract.Symbol"/>.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Equity.#ctor(System.String,System.String)">
            <summary>
            Create an Equity Contract for a specific exchange
            </summary>
            <param name="symbol">Symbol for the equity contract. See <see cref="P:Krs.Ats.IBNet.Contract.Symbol"/>.</param>
            <param name="exchange">Exchange for the equity contract. See <see cref="P:Krs.Ats.IBNet.Contract.Exchange"/></param>
        </member>
        <member name="T:Krs.Ats.IBNet.Contracts.Forex">
            <summary>
            Forex Currency Contract
            for use on the IdealPro or Ideal exchanges
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Forex.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a Forex Contract for use on the IdealPro or Ideal exchanges
            </summary>
            <param name="currency">Foreign Currency to Exchange</param>
            <param name="baseCurrency">Base Currency</param>
            <param name="exchange">IDEALPRO or IDEAL</param>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Forex.#ctor(System.String,System.String)">
            <summary>
            Creates a Forex Contract for use on the IdealPro Exchange
            </summary>
            <param name="currency">Foreign Currency to Exchange</param>
            <param name="baseCurrency">Base Currency</param>
        </member>
        <member name="T:Krs.Ats.IBNet.Contracts.Future">
            <summary>
            Future Class - uses default constructors for creating an future contract.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.Contract"/>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Future.#ctor(System.String,System.String,System.String)">
            <summary>
            Create n Future Contract for a specific exchange
            </summary>
            <param name="symbol">Symbol for the future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Symbol"/>.</param>
            <param name="exchange">Exchange for the future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Exchange"/>.</param>
            <param name="expiry">Expiry for a future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Expiry"/>.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Future.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a Future Contract for a specific exchange
            </summary>
            <param name="symbol">Symbol for the future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Symbol"/>.</param>
            <param name="exchange">Exchange for the future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Exchange"/>.</param>
            <param name="expiry">Expiry for a future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Expiry"/>.</param>
            <param name="currency">Currency for a future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Currency"/>.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Future.#ctor(System.String,System.String,System.String,System.String,System.Decimal)">
            <summary>
            Create a Future Contract for a specific exchange
            </summary>
            <param name="symbol">Symbol for the future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Symbol"/>.</param>
            <param name="exchange">Exchange for the future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Exchange"/>.</param>
            <param name="expiry">Expiry for a future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Expiry"/>.</param>
            <param name="currency">Currency for a future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Currency"/>.</param>
            <param name="multiplier">Multiplier for a future contract. See <see cref="P:Krs.Ats.IBNet.Contract.Multiplier"/>.</param>
        </member>
        <member name="T:Krs.Ats.IBNet.Contracts.Index">
            <summary>
            Create a contract with the default parameters for an indice
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.Contract"/>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Index.#ctor(System.String,System.String)">
            <summary>
            Create an Indice Contract for a specific exchange
            </summary>
            <param name="symbol">Symbol for the indice contract. See <see cref="P:Krs.Ats.IBNet.Contract.Symbol"/>.</param>
            <param name="exchange">Exchange for the indice contract. See <see cref="P:Krs.Ats.IBNet.Contract.Exchange"/></param>
        </member>
        <member name="T:Krs.Ats.IBNet.Contracts.Option">
            <summary>
            Option Class - uses default constructors for creating an option contract.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.Contract"/>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Option.#ctor(System.String,System.String,System.String,Krs.Ats.IBNet.RightType,System.Decimal)">
            <summary>
            Creates an Option Contract
            </summary>
            <param name="equitySymbol">Symbol of the equity. See <see cref="P:Krs.Ats.IBNet.Contract.Symbol"/>.</param>
            <param name="optionSymbol">Symbol of the option for the underlying equity. See <see cref="P:Krs.Ats.IBNet.Contract.LocalSymbol"/>.</param>
            <param name="expiry">Option Expiration String. See <see cref="P:Krs.Ats.IBNet.Contract.Expiry"/>.</param>
            <param name="right">Option Right (Put or Call). See <see cref="P:Krs.Ats.IBNet.Contract.Right"/>.</param>
            <param name="strike">Option Strike Price. See <see cref="P:Krs.Ats.IBNet.Contract.Strike"/>.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Option.#ctor(System.String,System.String,System.Int32,System.Int32,Krs.Ats.IBNet.RightType,System.Decimal)">
            <summary>
            Creates an Option Contract
            </summary>
            <param name="equitySymbol">Symbol of the equity. See <see cref="P:Krs.Ats.IBNet.Contract.Symbol"/>.</param>
            <param name="optionSymbol">Symbol of the option for the underlying equity. See <see cref="P:Krs.Ats.IBNet.Contract.LocalSymbol"/>.</param>
            <param name="year">Option Expiration Year. See <see cref="P:Krs.Ats.IBNet.Contract.Expiry"/>.</param>
            <param name="month">Option Expiration Month. See <see cref="P:Krs.Ats.IBNet.Contract.Expiry"/>.</param>
            <param name="right">Option Right (Put or Call). See <see cref="P:Krs.Ats.IBNet.Contract.Right"/>.</param>
            <param name="strike">Option Strike Price. See <see cref="P:Krs.Ats.IBNet.Contract.Strike"/>.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.Contracts.Option.#ctor(System.String,System.String,Krs.Ats.IBNet.SecurityType,System.String,System.String,System.Double,Krs.Ats.IBNet.RightType)">
            <summary>
            Creates an Option Contract
            </summary>
            <param name="symbol">This is the symbol of the underlying asset.</param>
            <param name="exchange">The order destination, such as Smart.</param>
            <param name="securityType">This is the security type.</param>
            <param name="currency">Specifies the currency.</param>
            <param name="expiry">The expiration date. Use the format YYYYMM.</param>
            <param name="strike">The strike price.</param>
            <param name="right">Specifies a Put or Call.</param>
        </member>
        <member name="T:Krs.Ats.IBNet.EnumDescConverter">
            <summary>
            EnumConverter supporting System.ComponentModel.DescriptionAttribute
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.EnumDescConverter.enumLookup">
            <summary>
            Cache of enumerables
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.EnumDescConverter.#cctor">
            <summary>
            Constructor to create caches
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.EnumDescConverter.GetEnumDescription(System.Enum)">
            <summary>
            Gets Enum Value's Description Attribute
            </summary>
            <param name="value">The value you want the description attribute for</param>
            <returns>The description, if any, else it's .ToString()</returns>
        </member>
        <member name="M:Krs.Ats.IBNet.EnumDescConverter.GetEnumValue(System.Type,System.String)">
            <summary>
            Gets the value of an Enum, based on it's Description Attribute or named value
            </summary>
            <param name="value">The Enum type</param>
            <param name="description">The description or name of the element</param>
            <returns>The value, or the passed in description, if it was not found</returns>
        </member>
        <member name="T:Krs.Ats.IBNet.EnumDescConverter.EnumTuple">
            <summary>
            Enum Tuple
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.EnumDescConverter.EnumTuple.EnumType">
            <summary>
            Enum Type
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.EnumDescConverter.EnumTuple.EnumToString">
            <summary>
            Enumeration to String
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.EnumDescConverter.EnumTuple.DescriptionToEnum">
            <summary>
            String to Enumeration
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.EnumDescConverter.EnumTuple.NameToEnum">
            <summary>
            Name to enum
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ActionSide">
            <summary>
            Order  Action Side. Specifies whether securities should be bought or sold.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ActionSide.Buy">
            <summary>
            Security is to be bought.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ActionSide.Sell">
            <summary>
            Security is to be sold.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ActionSide.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ActionSide.SShort">
            <summary>
            Sell Short as part of a combo leg
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ActionSide.SShortX">
            <summary>
            Short Sale Exempt action.
            SSHORTX allows some orders to be marked as exempt from the new SEC Rule 201
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.AgentDescription">
            <summary>
            Used for Rule 80A describes the type of trader.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.Individual">
            <summary>
            An individual
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.Agency">
            <summary>
            An Agency
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.AgentOtherMember">
            <summary>
            An Agent or Other Member
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.IndividualPTIA">
            <summary>
            Individual PTIA
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.AgencyPTIA">
            <summary>
            Agency PTIA
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.AgentOtherMemberPTIA">
            <summary>
            Agether or Other Member PTIA
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.IndividualPT">
            <summary>
            Individual PT
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.AgencyPT">
            <summary>
            Agency PT
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.AgentOtherMemberPT">
            <summary>
            Agent Other Member PT
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AgentDescription.None">
            <summary>
            No Description Provided
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.AuctionStrategy">
            <summary>
            Order Auction Strategy
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AuctionStrategy.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AuctionStrategy.AuctionMatch">
            <summary>
            Auction Match
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AuctionStrategy.AuctionImprovement">
            <summary>
            Auction Improvement
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.AuctionStrategy.AuctionTransparent">
            <summary>
            Auction Transparent
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.BarSize">
            <summary>
            Historical Bar Size Requests
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.OneSecond">
            <summary>
            1 second bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.FiveSeconds">
            <summary>
            5 second bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.FifteenSeconds">
            <summary>
            15 second bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.ThirtySeconds">
            <summary>
            30 second bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.OneMinute">
            <summary>
            1 minute bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.TwoMinutes">
            <summary>
            2 minute bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.FiveMinutes">
            <summary>
            5 minute bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.FifteenMinutes">
            <summary>
            15 minute bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.ThirtyMinutes">
            <summary>
            30 minute bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.OneHour">
            <summary>
            1 hour bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.OneDay">
            <summary>
            1 day bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.OneWeek">
            <summary>
            1 week bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.OneMonth">
            <summary>
            1 month bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.BarSize.OneYear">
            <summary>
            1 year bars
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ComboOpenClose">
            <summary>
            Retail Customers are restricted to "SAME"
            Institutional Customers may use "SAME", "OPEN", "CLOSE", "UNKNOWN"
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ComboOpenClose.Same">
            <summary>
            open/close leg value is same as combo
            This value is always used for retail accounts
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ComboOpenClose.Open">
            <summary>
            Institutional Accounts Only
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ComboOpenClose.Close">
            <summary>
            Institutional Accounts Only
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ComboOpenClose.Unknown">
            <summary>
            Institutional Accounts Only
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.SecurityIdType">
            <summary>
            Historical Bar Size Requests
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityIdType.None">
            <summary>
            No Security Id Type
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityIdType.ISIN">
            <summary>
            Example: Apple: US0378331005
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityIdType.CUSIP">
            <summary>
            Example: Apple: 037833100
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityIdType.SEDOL">
            <summary>
            Consists of 6-AN + check digit. Example: BAE: 0263494
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityIdType.RIC">
            <summary>
            Consists of exchange-independent RIC Root and a suffix identifying the exchange. Example: AAPL.O for Apple on NASDAQ.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ExecutionSide">
            <summary>
            Describes wether a security was bought or sold in an execution.
            The past tense equivalent of ActionSide.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ExecutionSide.Bought">
            <summary>
            Securities were bought.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ExecutionSide.Sold">
            <summary>
            Securities were sold.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.FinancialAdvisorAllocationMethod">
            <summary>
            Financial Advisor Allocation Method
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.FinancialAdvisorAllocationMethod.PercentChange">
            <summary>
            Percent Change
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.FinancialAdvisorAllocationMethod.AvailableEquity">
            <summary>
            Available Equity
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.FinancialAdvisorAllocationMethod.NetLiquidity">
            <summary>
            Net Liquidity
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.FinancialAdvisorAllocationMethod.EqualQuantity">
            <summary>
            Equal Quantity
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.FinancialAdvisorAllocationMethod.None">
            <summary>
            No Allocation Method
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.HistoricalDataType">
            <summary>
            Historical Data Request Return Types
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.HistoricalDataType.Trades">
            <summary>
            Return Trade data only
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.HistoricalDataType.Midpoint">
            <summary>
            Return the mid point between the bid and ask
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.HistoricalDataType.Bid">
            <summary>
            Return Bid Prices only
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.HistoricalDataType.Ask">
            <summary>
            Return ask prices only
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.HistoricalDataType.BidAsk">
            <summary>
            Return Bid / Ask price only
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.LogLevel">
            <summary>
            Used for the set server log level
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.LogLevel.Undefined">
            <summary>
            Undefined Log Level
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.LogLevel.System">
            <summary>
            System Messages
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.LogLevel.Error">
            <summary>
            Error Messages
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.LogLevel.Warning">
            <summary>
            Warning Messages
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.LogLevel.Information">
            <summary>
            Information Messages
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.LogLevel.Detail">
            <summary>
            Detail Messages
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.MarketDepthOperation">
            <summary>
            Market Depth Operation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.MarketDepthOperation.Insert">
            <summary>
            Insert  (insert this new order into the row identified by 'position')
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.MarketDepthOperation.Update">
            <summary>
            Update (update the existing order in the row identified by 'position')
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.MarketDepthOperation.Delete">
            <summary>
            Delete (delete the existing order at the row identified by 'position')
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.MarketDepthSide">
            <summary>
            Market Depth Side
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.MarketDepthSide.Ask">
            <summary>
            Ask Price Side
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.MarketDepthSide.Bid">
            <summary>
            Bid Price Side
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.NewsType">
            <summary>
            News Message Type
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.NewsType.Regular">
            <summary>
            Reqular news bulletin
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.NewsType.ExchangeUnavailable">
            <summary>
            Exchange no longer available for trading
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.NewsType.ExchangeAvailable">
            <summary>
            Exchange is available for trading
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.OcaType">
            <summary>
            OCA Type Options
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OcaType.Undefined">
            <summary>
            Undefined Oca Type
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OcaType.CancelAll">
            <summary>
            1 = Cancel all remaining orders with block
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OcaType.ReduceWithBlock">
            <summary>
            2 = Remaining orders are proportionately reduced in size with block
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OcaType.ReduceWithNoBlock">
            <summary>
            3 = Remaining orders are proportionately reduced in size with no block
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.OrderOrigin">
            <summary>
            Order Origin Fields
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderOrigin.Customer">
            <summary>
            Order originated from the customer
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderOrigin.Firm">
            <summary>
            Order originated from teh firm
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.OrderStatus">
            <summary>
            Order Status reported by enum order status.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.PendingSubmit">
            <summary>
            indicates that you have transmitted the order, but have not yet received
            confirmation that it has been accepted by the order destination.
            This order status is not sent by TWS and should be explicitly set by the API developer when an order is submitted.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.PendingCancel">
            <summary>
            PendingCancel - indicates that you have sent a request to cancel the order
            but have not yet received cancel confirmation from the order destination.
            At this point, your order is not confirmed canceled. You may still receive
            an execution while your cancellation request is pending.
            This order status is not sent by TWS and should be explicitly set by the API developer when an order is canceled.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.PreSubmitted">
            <summary>
            indicates that a simulated order type has been accepted by the IB system and
            that this order has yet to be elected. The order is held in the IB system
            (and the status remains DARK BLUE) until the election criteria are met.
            At that time the order is transmitted to the order destination as specified
            (and the order status color will change).
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.Submitted">
            <summary>
            indicates that your order has been accepted at the order destination and is working.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.Canceled">
            <summary>
            indicates that the balance of your order has been confirmed canceled by the IB system.
            This could occur unexpectedly when IB or the destination has rejected your order.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.Filled">
            <summary>
            The order has been completely filled.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.Inactive">
            <summary>
            The Order is inactive
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.PartiallyFilled">
            <summary>
            The order is Partially Filled
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.ApiPending">
            <summary>
            Api Pending
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.ApiCancelled">
            <summary>
            Api Cancelled
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.Error">
            <summary>
            Indicates that there is an error with this order
            This order status is not sent by TWS and should be explicitly set by the API developer when an error has occured.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderStatus.None">
            <summary>
            No Order Status
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.OrderType">
            <summary>
            Order Type Enumerations
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.Market">
            <summary>
            A Market order is an order to buy or sell an asset at the bid or offer price currently available in the marketplace.
            Bonds, Forex, Futures, Future Options, Options, Stocks, Warrants
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.MarketOnClose">
            <summary>
            A market order that is submitted to execute as close to the closing price as possible.
            Non US Futures, Non US Options, Stocks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.Limit">
            <summary>
            A limit order is an order to buy or sell a contract at a specified price or better.
            Bonds, Forex, Futures, Future Options, Options, Stocks, Warrants
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.LimitOnClose">
            <summary>
            An LOC (Limit-on-Close) order that executes at the closing price if the closing price is at or better than the submitted limit price, according to the rules of the specific exchange. Otherwise the order will be cancelled. 
            Non US Futures , Stocks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.PeggedToMarket">
            <summary>
            An order that is pegged to buy on the best offer and sell on the best bid.
            Your order is pegged to buy on the best offer and sell on the best bid. You can also use an offset amount which is subtracted from the best offer for a buy order, and added to the best bid for a sell order.
            Stocks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.Stop">
            <summary>
            A Stop order becomes a market order to buy or sell securities or commodities once the specified stop price is attained or penetrated.
            Forex, Futures, Future Options, Options, Stocks, Warrants
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.StopLimit">
            <summary>
            A STOP-LIMIT order is similar to a stop order in that a stop price will activate the order. However, once activated, the stop-limit order becomes a buy limit or sell limit order and can only be executed at a specific price or better. It is a combination of both the stop order and the limit order.
            Forex, Futures, Options, Stocks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.TrailingStop">
            <summary>
            A trailing stop for a sell order sets the stop price at a fixed amount below the market price. If the market price rises, the stop loss price rises by the increased amount, but if the stock price falls, the stop loss price remains the same. The reverse is true for a buy trailing stop order.
            Forex, Futures, Future Options, Options, Stocks, Warrants
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.Relative">
            <summary>
            A Relative order derives its price from a combination of the market quote and a user-defined offset amount. The order is submitted as a limit order and modified according to the pricing logic until it is executed or you cancel the order.
            Options, Stocks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.VolumeWeightedAveragePrice">
            <summary>
            The VWAP for a stock is calculated by adding the dollars traded for every transaction in that stock ("price" x "number of shares traded") and dividing the total shares traded. By default, a VWAP order is computed from the open of the market to the market close, and is calculated by volume weighting all transactions during this time period. TWS allows you to modify the cut-off and expiration times using the Time in Force and Expiration Date fields, respectively.
            Stocks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.TrailingStopLimit">
            <summary>
            A trailing stop limit for a sell order sets the stop price at a fixed amount below the market price and defines a limit price for the sell order. If the market price rises, the stop loss price rises by the increased amount, but if the stock price falls, the stop loss price remains the same. When the order triggers, a limit order is submitted at the price you defined. The reverse is true for a buy trailing stop limit order.
            Forex, Futures, Future Options, Options, Stocks, Warrants
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.Volatility">
            <summary>
            TWS Version 857 introduced volatility trading of options, and a new order type, "VOL." What happens with VOL orders is that the limit price that is sent to the exchange is computed by TWS as a function of a daily or annualized option volatility provided by the user. VOL orders can be placed for any US option that trades on the BOX exchange. VOL orders are eligible for dynamic management, a powerful new functionality wherein TWS can manage options orders in response to specifications set by the user.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.None">
            <summary>
            VOL orders only. Enter an order type to instruct TWS to submit a
            delta neutral trade on full or partial execution of the VOL order.
            For no hedge delta order to be sent, specify NONE.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.Empty">
            <summary>
            Used to initialize the delta Order Field.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.Default">
            <summary>
            Default - used for Delta Neutral Order Type
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.Scale">
            <summary>
            Scale Order.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.MarketIfTouched">
            <summary>
            Market if Touched Order.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OrderType.LimitIfTouched">
            <summary>
            Limit if Touched Order.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.RealTimeBarType">
            <summary>
            Real Time Bar Type - "What to Show"
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.RealTimeBarType.Trades">
            <summary>
            Trades
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.RealTimeBarType.Bid">
            <summary>
            Bid
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.RealTimeBarType.Ask">
            <summary>
            Ask
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.RealTimeBarType.Midpoint">
            <summary>
            Mid Point
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ShortSaleSlot">
            <summary>
            Used in a combination leg for Short Sale Orders.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ShortSaleSlot.Unapplicable">
            <summary>
            e.g. retail customer or not SSHORT leg
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ShortSaleSlot.ClearingBroker">
            <summary>
            Clearing Broker
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ShortSaleSlot.ThirdParty">
            <summary>
            Third Party
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TimeInForce">
            <summary>
            Order Time in Force Values
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TimeInForce.Day">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TimeInForce.GoodTillCancel">
            <summary>
            Good Till Cancel
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TimeInForce.ImmediateOrCancel">
            <summary>
            You can set the time in force for MARKET or LIMIT orders as IOC. This dictates that any portion of the order not executed immediately after it becomes available on the market will be cancelled.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TimeInForce.FillOrKill">
            <summary>
            Setting FOK as the time in force dictates that the entire order must execute immediately or be canceled.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TimeInForce.GoodTillDate">
            <summary>
            Good Till Date
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TimeInForce.MarketOnOpen">
            <summary>
            Market On Open
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TimeInForce.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TriggerMethod">
            <summary>
            Trigger method for actions.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TriggerMethod.Default">
            <summary>
            0 - the default value. The "double bid/ask" method will be used for orders for OTC stocks and US options. All other orders will used the "last" method.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TriggerMethod.DoubleBidAsk">
            <summary>
            1 - use "double bid/ask" method, where stop orders are triggered based on two consecutive bid or ask prices.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TriggerMethod.Last">
            <summary>
            2 - "last" method, where stop orders are triggered based on the last price.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TriggerMethod.DoubleLast">
            <summary>
            3 double last method.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TriggerMethod.BidAsk">
            <summary>
            4 bid/ask method.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TriggerMethod.LastOrBidAsk">
            <summary>
            7 last or bid/ask method.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TriggerMethod.MidpointMethod">
            <summary>
            8 mid-point method.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.VolatilityType">
            <summary>
            Time frame for Volatility
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.VolatilityType.Undefined">
            <summary>
            Undefined Volatility
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.VolatilityType.Daily">
            <summary>
            Daily Average Volatility
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.VolatilityType.Annual">
            <summary>
            Annual Average Volatility
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.BondContractDetailsEventArgs">
            <summary>
            Bond Contract Details Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.BondContractDetailsEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.ContractDetails)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">Request Id</param>
            <param name="contractDetails">This structure contains a full description of the bond contract being looked up.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.BondContractDetailsEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.BondContractDetailsEventArgs.ContractDetails">
            <summary>
            This structure contains a full description of the bond contract being looked up.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.BondContractDetailsEventArgs.RequestId">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ConnectionClosedEventArgs">
            <summary>
            Connection Closed Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ConnectionClosedEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ContractDetailsEndEventArgs">
            <summary>
            Contract Details Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ContractDetailsEndEventArgs.#ctor(System.Int32)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">Request Id</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ContractDetailsEndEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetailsEndEventArgs.RequestId">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.AccountDownloadEndEventArgs">
            <summary>
            Contract Details Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.AccountDownloadEndEventArgs.#ctor(System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="accountName">Account Name</param>
        </member>
        <member name="M:Krs.Ats.IBNet.AccountDownloadEndEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.AccountDownloadEndEventArgs.AccountName">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ReportExceptionEventArgs">
            <summary>
            Update News Bulletin Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ReportExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Full constructor.
            </summary>
            <param name="error">The exception that was thrown.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ReportExceptionEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ReportExceptionEventArgs.Error">
            <summary>
            The exception that was thrown.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TickSnapshotEndEventArgs">
            <summary>
            Tick Snapshot End Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.TickSnapshotEndEventArgs.#ctor(System.Int32)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">The ticker ID of the request to which this row is responding.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.TickSnapshotEndEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickSnapshotEndEventArgs.RequestId">
            <summary>
            The ticker ID of the request to which this row is responding.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.DeltaNuetralValidationEventArgs">
            <summary>
            Execution Data End Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.DeltaNuetralValidationEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.UnderComp)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">Request Id</param>
            <param name="underComp">Underlying Component</param>
        </member>
        <member name="M:Krs.Ats.IBNet.DeltaNuetralValidationEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.DeltaNuetralValidationEventArgs.RequestId">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.DeltaNuetralValidationEventArgs.UnderComp">
            <summary>
            Underlying Component
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ExecutionDataEndEventArgs">
            <summary>
            Execution Data End Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ExecutionDataEndEventArgs.#ctor(System.Int32)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">Request Id</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ExecutionDataEndEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecutionDataEndEventArgs.RequestId">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.FundamentalDetailsEventArgs">
            <summary>
            Contract Details Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.FundamentalDetailsEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">Request Id</param>
            <param name="data">Xml Data</param>
        </member>
        <member name="M:Krs.Ats.IBNet.FundamentalDetailsEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.FundamentalDetailsEventArgs.Data">
            <summary>
            Xml Data
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.FundamentalDetailsEventArgs.RequestId">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ScannerDataEndEventArgs">
            <summary>
            Scanner Data Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ScannerDataEndEventArgs.#ctor(System.Int32)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">The ticker ID of the request to which this row is responding.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ScannerDataEndEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerDataEndEventArgs.RequestId">
            <summary>
            The ticker ID of the request to which this row is responding.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.CurrentTimeEventArgs">
            <summary>
            Current Time Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.CurrentTimeEventArgs.#ctor(System.DateTime)">
            <summary>
            Full Constructor
            </summary>
            <param name="time">Current system time on the server side</param>
        </member>
        <member name="M:Krs.Ats.IBNet.CurrentTimeEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.CurrentTimeEventArgs.Time">
            <summary>
            Current system time on the server side in UTC
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ErrorEventArgs">
            <summary>
            Error Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ErrorEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.ErrorMessage,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="tickerId">This is the orderId or tickerId of the request that generated the error.</param>
            <param name="errorCode">Error codes are documented in the Error Codes topic.</param>
            <param name="errorMsg">This is the textual description of the error, also documented in the Error Codes topic.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ErrorEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ErrorEventArgs.TickerId">
            <summary>
            This is the orderId or tickerId of the request that generated the error.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ErrorEventArgs.ErrorCode">
            <summary>
            Error codes are documented in the Error Codes topic.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.ErrorMessage"/>
        </member>
        <member name="P:Krs.Ats.IBNet.ErrorEventArgs.ErrorMsg">
            <summary>
            This is the textual description of the error, also documented in the Error Codes topic.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.ErrorMessage"/>
        </member>
        <member name="T:Krs.Ats.IBNet.HistoricalDataEventArgs">
            <summary>
            Historical Data Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.HistoricalDataEventArgs.#ctor(System.Int32,System.DateTime,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Int32,System.Double,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">The ticker Id of the request to which this bar is responding.</param>
            <param name="date">The date-time stamp of the start of the bar.
            The format is determined by the reqHistoricalData() formatDate parameter.</param>
            <param name="open">Bar opening price.</param>
            <param name="high">High price during the time covered by the bar.</param>
            <param name="low">Low price during the time covered by the bar.</param>
            <param name="close">Bar closing price.</param>
            <param name="volume">Volume during the time covered by the bar.</param>
            <param name="trades">When TRADES historical data is returned, represents the number of trades that
            occurred during the time period the bar covers.</param>
            <param name="wap">Weighted average price during the time covered by the bar.</param>
            <param name="hasGaps">Whether or not there are gaps in the data.</param>
            <param name="recordNumber">Current Record Number out of Record Total.</param>
            <param name="recordTotal">Total Records Returned by Historical Request.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.HistoricalDataEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.RequestId">
            <summary>
            The ticker Id of the request to which this bar is responding.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.Date">
            <summary>
            The date-time stamp of the start of the bar.
            The format is determined by the reqHistoricalData() formatDate parameter.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.Open">
            <summary>
            Bar opening price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.High">
            <summary>
            High price during the time covered by the bar.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.Low">
            <summary>
            Low price during the time covered by the bar.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.Close">
            <summary>
            Bar closing price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.Volume">
            <summary>
            Volume during the time covered by the bar.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.Trades">
            <summary>
            When TRADES historical data is returned, represents the number of trades that
            occurred during the time period the bar covers.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.Wap">
            <summary>
            Weighted average price during the time covered by the bar.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.HasGaps">
            <summary>
            Whether or not there are gaps in the data.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.RecordNumber">
            <summary>
            Current Record Number out of Record Total
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.HistoricalDataEventArgs.RecordTotal">
            <summary>
            Total records returned by query
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ManagedAccountsEventArgs">
            <summary>
            Managed Accounts Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ManagedAccountsEventArgs.#ctor(System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="accountsList">The comma delimited list of FA managed accounts.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ManagedAccountsEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ManagedAccountsEventArgs.AccountsList">
            <summary>
            The comma delimited list of FA managed accounts.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.RealTimeBarEventArgs">
            <summary>
            Real Time Bar Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.RealTimeBarEventArgs.#ctor(System.Int32,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int64,System.Double,System.Int32)">
            <summary>
            Real Time Bar Event Arguments
            </summary>
            <param name="requestId">The ticker Id of the request to which this bar is responding.</param>
            <param name="time">The date-time stamp of the start of the bar.
            The format is determined by the reqHistoricalData() formatDate parameter.</param>
            <param name="open">Bar opening price.</param>
            <param name="high">High price during the time covered by the bar.</param>
            <param name="low">Low price during the time covered by the bar.</param>
            <param name="close">Bar closing price.</param>
            <param name="volume">Volume during the time covered by the bar.</param>
            <param name="wap">Weighted average price during the time covered by the bar.</param>
            <param name="count">When TRADES historical data is returned, represents the number of trades that occurred during the time period the bar covers.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.RealTimeBarEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.RealTimeBarEventArgs.RequestId">
            <summary>
            The ticker Id of the request to which this bar is responding.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.RealTimeBarEventArgs.Time">
            <summary>
            The date-time stamp of the start of the bar.
            The format is determined by the reqHistoricalData() formatDate parameter.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.RealTimeBarEventArgs.Open">
            <summary>
            Bar opening price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.RealTimeBarEventArgs.High">
            <summary>
            High price during the time covered by the bar.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.RealTimeBarEventArgs.Low">
            <summary>
            Low price during the time covered by the bar.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.RealTimeBarEventArgs.Close">
            <summary>
            Bar closing price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.RealTimeBarEventArgs.Volume">
            <summary>
            Volume during the time covered by the bar.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.RealTimeBarEventArgs.Wap">
            <summary>
            Weighted average price during the time covered by the bar.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.RealTimeBarEventArgs.Count">
            <summary>
            When TRADES historical data is returned, represents the number of trades that occurred during the time period the bar covers.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ReceiveFAEventArgs">
            <summary>
            Receive Financial Advisor Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ReceiveFAEventArgs.#ctor(Krs.Ats.IBNet.FADataType,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="faDataType">Specifies the type of Financial Advisor configuration data being received from TWS.</param>
            <param name="xml">The XML string containing the previously requested FA configuration information.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ReceiveFAEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ReceiveFAEventArgs.FADataType">
            <summary>
            Specifies the type of Financial Advisor configuration data being received from TWS.
            </summary>
            <remarks>Valid values include:
            1 = GROUPS
            2 = PROFILE
            3 = ACCOUNT ALIASES
            </remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.ReceiveFAEventArgs.Xml">
            <summary>
            The XML string containing the previously requested FA configuration information.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ScannerDataEventArgs">
            <summary>
            Scanner Data Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ScannerDataEventArgs.#ctor(System.Int32,System.Int32,Krs.Ats.IBNet.ContractDetails,System.String,System.String,System.String,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">The ticker ID of the request to which this row is responding.</param>
            <param name="rank">The ranking within the response of this bar.</param>
            <param name="contractDetails">This structure contains a full description of the contract that was executed.</param>
            <param name="distance">Meaning varies based on query.</param>
            <param name="benchmark">Meaning varies based on query.</param>
            <param name="projection">Meaning varies based on query.</param>
            <param name="legsStr">Describes combo legs when scan is returning EFP.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ScannerDataEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerDataEventArgs.RequestId">
            <summary>
            The ticker ID of the request to which this row is responding.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerDataEventArgs.Rank">
            <summary>
            The ranking within the response of this bar.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerDataEventArgs.ContractDetails">
            <summary>
            This structure contains a full description of the contract that was executed.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerDataEventArgs.Distance">
            <summary>
            Meaning varies based on query.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerDataEventArgs.Benchmark">
            <summary>
            Meaning varies based on query.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerDataEventArgs.Projection">
            <summary>
            Meaning varies based on query.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerDataEventArgs.LegsStr">
            <summary>
            Describes combo legs when scan is returning EFP.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ScannerParametersEventArgs">
            <summary>
            Scanner Parameters Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ScannerParametersEventArgs.#ctor(System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="xml">Document describing available scanner subscription parameters.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ScannerParametersEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerParametersEventArgs.Xml">
            <summary>
            Document describing available scanner subscription parameters.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs">
            <summary>
            Update Market Depth L2 Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs.#ctor(System.Int32,System.Int32,System.String,Krs.Ats.IBNet.MarketDepthOperation,Krs.Ats.IBNet.MarketDepthSide,System.Decimal,System.Int32)">
            <summary>
            Full Constructor
            </summary>
            <param name="tickerId">The ticker Id that was specified previously in the call to <see cref="M:Krs.Ats.IBNet.IBClient.RequestMarketDepth(System.Int32,Krs.Ats.IBNet.Contract,System.Int32)"/>.</param>
            <param name="position">Specifies the row id of this market depth entry.</param>
            <param name="marketMaker">Specifies the exchange hosting this order.</param>
            <param name="operation">Identifies the how this order should be applied to the market depth.</param>
            <param name="side">Identifies the side of the book that this order belongs to.</param>
            <param name="price">The order price.</param>
            <param name="size">The order size.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs.TickerId">
            <summary>
            The ticker Id that was specified previously in the call to <see cref="M:Krs.Ats.IBNet.IBClient.RequestMarketDepth(System.Int32,Krs.Ats.IBNet.Contract,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs.Position">
            <summary>
            Specifies the row id of this market depth entry.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs.MarketMaker">
            <summary>
            Specifies the exchange hosting this order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs.Operation">
            <summary>
            Identifies the how this order should be applied to the market depth.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.MarketDepthOperation"/>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs.Side">
            <summary>
            Identifies the side of the book that this order belongs to.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs.Price">
            <summary>
            The order price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs.Size">
            <summary>
            The order size.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ComboLeg">
            <summary>
            Used to manage the legs of a combination order.
            </summary>
            <seealso cref="P:Krs.Ats.IBNet.Contract.ComboLegs"/>
            <seealso href="http://www.interactivebrokers.com/php/webhelp/Interoperability/Socket_Client_Java/java_properties.htm#ComboLeg"/>
        </member>
        <member name="M:Krs.Ats.IBNet.ComboLeg.#ctor">
            <summary>
            Initialize the ComboLeg
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ComboLeg.#ctor(System.Int32,System.Int32,Krs.Ats.IBNet.ActionSide,System.String,Krs.Ats.IBNet.ComboOpenClose,Krs.Ats.IBNet.ShortSaleSlot,System.String)">
            <summary>
            Initialize the ComboLeg
            </summary>
            <param name="conId">The unique contract identifier specifying the security. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.ConId"/>.</param>
            <param name="ratio">Select the relative number of contracts for the leg you are constructing. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.Ratio"/>.</param>
            <param name="action">The side (buy or sell) for the leg you are constructing. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.Action"/></param>
            <param name="exchange">The exchange to which the complete combination order will be routed. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.Exchange"/>.</param>
            <param name="openClose">Specifies whether the order is an open or close order. Retail customers must use <see cref="F:Krs.Ats.IBNet.ComboOpenClose.Same"/>. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.OpenClose"/></param>
            <param name="shortSaleSlot">ShortSaleSlot of Third Party requires DesignatedLocation to be specified. Non-empty DesignatedLocation values for all other cases will cause orders to be rejected. See Property <see cref="P:Krs.Ats.IBNet.ComboLeg.ShortSaleSlot"/></param>
            <param name="designatedLocation">Use only when shortSaleSlot value = 2. See Property <see cref="P:Krs.Ats.IBNet.ComboLeg.DesignatedLocation"/></param>
        </member>
        <member name="M:Krs.Ats.IBNet.ComboLeg.#ctor(System.Int32,System.Int32,Krs.Ats.IBNet.ActionSide,System.String,Krs.Ats.IBNet.ComboOpenClose,Krs.Ats.IBNet.ShortSaleSlot,System.String,System.Int32)">
            <summary>
            Initialize the ComboLeg
            </summary>
            <param name="conId">The unique contract identifier specifying the security. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.ConId"/>.</param>
            <param name="ratio">Select the relative number of contracts for the leg you are constructing. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.Ratio"/>.</param>
            <param name="action">The side (buy or sell) for the leg you are constructing. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.Action"/></param>
            <param name="exchange">The exchange to which the complete combination order will be routed. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.Exchange"/>.</param>
            <param name="openClose">Specifies whether the order is an open or close order. Retail customers must use <see cref="F:Krs.Ats.IBNet.ComboOpenClose.Same"/>. See property <see cref="P:Krs.Ats.IBNet.ComboLeg.OpenClose"/></param>
            <param name="shortSaleSlot">ShortSaleSlot of Third Party requires DesignatedLocation to be specified. Non-empty DesignatedLocation values for all other cases will cause orders to be rejected. See Property <see cref="P:Krs.Ats.IBNet.ComboLeg.ShortSaleSlot"/></param>
            <param name="designatedLocation">Use only when shortSaleSlot value = 2. See Property <see cref="P:Krs.Ats.IBNet.ComboLeg.DesignatedLocation"/></param>
            <param name="exemptCode">Short Sale Exempt Code. See Property <see cref="P:Krs.Ats.IBNet.ComboLeg.ExemptCode"/></param>
        </member>
        <member name="P:Krs.Ats.IBNet.ComboLeg.ConId">
            <summary>
            The unique contract identifier specifying the security.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ComboLeg.Ratio">
            <summary>
            Select the relative number of contracts for the leg you are constructing.
            To help determine the ratio for a specific combination order, refer to the
            Interactive Analytics section of the User's Guide.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ComboLeg.Action">
            <summary>
            The side (buy or sell) for the leg you are constructing.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ComboLeg.Exchange">
            <summary>
            The exchange to which the complete combination order will be routed.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ComboLeg.OpenClose">
            <summary>
            Specifies whether the order is an open or close order.
            Retail customers must use <see cref="F:Krs.Ats.IBNet.ComboOpenClose.Same"/>.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.ComboOpenClose"/>
        </member>
        <member name="P:Krs.Ats.IBNet.ComboLeg.ShortSaleSlot">
            <summary>
            ShortSaleSlot of Third Party requires DesignatedLocation to be specified. Non-empty DesignatedLocation values for all other cases will cause orders to be rejected.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ComboLeg.DesignatedLocation">
            <summary>
            Use only when shortSaleSlot value = 2.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ComboLeg.ExemptCode">
            <summary>
            Short Sale Exempt Code
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ContractDetails">
            <summary>
            Contract details returned from Interactive Brokers
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ContractDetails.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ContractDetails.#ctor(Krs.Ats.IBNet.Contract,System.String,System.String,System.Double,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="summary">A contract summary.</param>
            <param name="marketName">The market name for this contract.</param>
            <param name="tradingClass">The trading class name for this contract.</param>
            <param name="minTick">The minimum price tick.</param>
            <param name="orderTypes">The list of valid order types for this contract.</param>
            <param name="validExchanges">The list of exchanges this contract is traded on.</param>
            <param name="underConId">The Underlying Contract Id (for derivatives only)</param>
            <param name="longName">Long Name</param>
            <param name="contractMonth">The contract month. Typically the contract month of the underlying for a futures contract.</param>
            <param name="industry">The industry classification of the underlying/product. For example, Financial.</param>
            <param name="category">The industry category of the underlying. For example, InvestmentSvc.</param>
            <param name="subcategory">The industry subcategory of the underlying. For example, Brokerage.</param>
            <param name="timeZoneId">The ID of the time zone for the trading hours of the product. For example, EST.</param>
            <param name="tradingHours">The trading hours of the product. For example, 20090507:0700-1830,1830-2330;20090508:CLOSED.</param>
            <param name="liquidHours">The liquid trading hours of the product. For example, 20090507:0930-1600;20090508:CLOSED.</param>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Summary">
            <summary>
            A contract summary.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.MarketName">
            <summary>
            The market name for this contract.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.TradingClass">
            <summary>
            The trading class name for this contract.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.MinTick">
            <summary>
            The minimum price tick.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.PriceMagnifier">
            <summary>
            Allows execution and strike prices to be reported consistently with
            market data, historical data and the order price, i.e. Z on LIFFE is
            reported in index points and not GBP.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.OrderTypes">
            <summary>
            The list of valid order types for this contract.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.ValidExchanges">
            <summary>
            The list of exchanges this contract is traded on.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.UnderConId">
            <summary>
            Underlying Contract Id
            underConId (underlying contract ID), has been added to the
            ContractDetails structure to allow unambiguous identification with the underlying contract
            (you no longer have to match by symbol, etc.). This new field applies to derivatives only.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Cusip">
            <summary>
            For Bonds. The nine-character bond CUSIP or the 12-character SEDOL.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Ratings">
            <summary>
            For Bonds. Identifies the credit rating of the issuer. A higher credit
            rating generally indicates a less risky investment. Bond ratings
            are from Moody's and SP respectively.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.DescriptionAppend">
            <summary>
            For Bonds. A description string containing further descriptive information about the bond.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.BondType">
            <summary>
            For Bonds. The type of bond, such as "CORP."
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.CouponType">
            <summary>
            For Bonds. The type of bond coupon, such as "FIXED."
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Callable">
            <summary>
            For Bonds. Values are True or False. If true, the bond can be called
            by the issuer under certain conditions.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Putable">
            <summary>
            For Bonds. Values are True or False. If true, the bond can be sold
            back to the issuer under certain conditions.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Coupon">
            <summary>
            For Bonds. The interest rate used to calculate the amount you will
            receive in interest payments over the course of the year.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Convertible">
            <summary>
            For Bonds. Values are True or False.
            If true, the bond can be converted to stock under certain conditions.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Maturity">
            <summary>
            For Bonds. The date on which the issuer must repay the face value of the bond.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.IssueDate">
            <summary>
            For Bonds. The date the bond was issued. 
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.NextOptionDate">
            <summary>
            For Bonds, relevant if the bond has embedded options
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.NextOptionType">
            <summary>
            For Bonds, relevant if the bond has embedded options
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.NextOptionPartial">
            <summary>
            For Bonds, relevant if the bond has embedded options, i.e., is the next option full or partial?
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Notes">
            <summary>
            For Bonds, if populated for the bond in IBs database
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.LongName">
            <summary>
            Long Name
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.ContractMonth">
            <summary>
            The contract month. Typically the contract month of the underlying for a futures contract.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Industry">
            <summary>
            The industry classification of the underlying/product. For example, Financial.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Category">
            <summary>
            The industry category of the underlying. For example, InvestmentSvc.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.Subcategory">
            <summary>
            The industry subcategory of the underlying. For example, Brokerage.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.TimeZoneId">
            <summary>
            The ID of the time zone for the trading hours of the product. For example, EST.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.TradingHours">
            <summary>
            The trading hours of the product. For example, 20090507:0700-1830,1830-2330;20090508:CLOSED.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetails.LiquidHours">
            <summary>
            The liquid trading hours of the product. For example, 20090507:0930-1600;20090508:CLOSED.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ContractDetailsEventArgs">
            <summary>
            Contract Details Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ContractDetailsEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.ContractDetails)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">Request Id</param>
            <param name="contractDetails">This structure contains a full description of the contract being looked up.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ContractDetailsEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetailsEventArgs.ContractDetails">
            <summary>
            This structure contains a full description of the contract being looked up.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ContractDetailsEventArgs.RequestId">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ExecDetailsEventArgs">
            <summary>
            Exec Details Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ExecDetailsEventArgs.#ctor(System.Int32,System.Int32,Krs.Ats.IBNet.Contract,Krs.Ats.IBNet.Execution)">
            <summary>
            Full Constructor
            </summary>
            <param name="requestId">The request Id for the Execution Details.</param>
            <param name="orderId">The order Id that was specified previously in the call to placeOrder().</param>
            <param name="contract">This structure contains a full description of the contract that was executed.</param>
            <param name="execution">This structure contains addition order execution details.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.ExecDetailsEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecDetailsEventArgs.OrderId">
            <summary>
            The order Id that was specified previously in the call to placeOrder().
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecDetailsEventArgs.RequestId">
            <summary>
            Request Id
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecDetailsEventArgs.Contract">
            <summary>
            This structure contains a full description of the contract that was executed.
            </summary>
            <seealso cref="P:Krs.Ats.IBNet.ExecDetailsEventArgs.Contract"/>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecDetailsEventArgs.Execution">
            <summary>
            This structure contains addition order execution details.
            </summary>
            <seealso cref="P:Krs.Ats.IBNet.ExecDetailsEventArgs.Execution"/>
        </member>
        <member name="T:Krs.Ats.IBNet.Execution">
            <summary>
            Execution details returned by Interactive Brokers
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.Execution.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.Execution.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String,Krs.Ats.IBNet.ExecutionSide,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Decimal,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="orderId">The order id.</param>
            <param name="clientId">TWS orders have a fixed client id of "0."</param>
            <param name="executionId">Unique order execution id.</param>
            <param name="time">The order execution time.</param>
            <param name="accountNumber">The customer account number.</param>
            <param name="exchange">Exchange that executed the order.</param>
            <param name="side">Specifies if the transaction was a sale or a purchase.</param>
            <param name="shares">The number of shares filled.</param>
            <param name="price">The order execution price.</param>
            <param name="permId">The TWS id used to identify orders, remains the same over TWS sessions.</param>
            <param name="liquidation">Identifies the position as one to be liquidated last should the need arise.</param>
            <param name="cumQuantity">Cumulative quantity. Used in regular trades, combo trades and legs of the combo.</param>
            <param name="avgPrice">Average price. Used in regular trades, combo trades and legs of the combo.</param>
            <param name="orderRef">Order Reference</param>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.OrderId">
            <summary>
            The order id. 
            </summary>
            <remarks>TWS orders have a fixed order id of "0."</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.ClientId">
            <summary>
            The id of the client that placed the order.
            </summary>
            <remarks>TWS orders have a fixed client id of "0."</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.ExecutionId">
            <summary>
            Unique order execution id.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.Time">
            <summary>
            The order execution time.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.AccountNumber">
            <summary>
            The customer account number.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.Exchange">
            <summary>
            Exchange that executed the order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.Side">
            <summary>
            Specifies if the transaction was a sale or a purchase.
            </summary>
            <remarks>Valid values are:
            <list type="bullet">
            <item>Bought</item>
            <item>Sold</item>
            </list>
            </remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.Shares">
            <summary>
            The number of shares filled.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.Price">
            <summary>
            The order execution price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.PermId">
            <summary>
            The TWS id used to identify orders, remains the same over TWS sessions.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.Liquidation">
            <summary>
            Identifies the position as one to be liquidated last should the need arise.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.CumQuantity">
            <summary>
            Cumulative Quantity
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Execution.AvgPrice">
            <summary>
            Average Price
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ExecutionFilter">
            <summary>
            Argument passed to interactive brokers when requesting execution history.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ExecutionFilter.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.ExecutionFilter.#ctor(System.Int32,System.String,System.DateTime,System.String,Krs.Ats.IBNet.SecurityType,System.String,Krs.Ats.IBNet.ActionSide)">
            <summary>
            Full Constructor
            </summary>
            <param name="clientId">Filter the results of the ReqExecutions() method based on the clientId.</param>
            <param name="acctCode">Filter the results of the ReqExecutions() method based on an account code.</param>
            <param name="time">Filter the results of the ReqExecutions() method based on execution reports received after the specified time.</param>
            <param name="symbol">Filter the results of the ReqExecutions() method based on the order symbol.</param>
            <param name="securityType">Refer to the Contract struct for the list of valid security types.</param>
            <param name="exchange">Filter the results of the ReqExecutions() method based on the order exchange.</param>
            <param name="side">Filter the results of the ReqExecutions() method based on the order action.</param>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecutionFilter.ClientId">
            <summary>
            Filter the results of the ReqExecutions() method based on the clientId.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecutionFilter.AcctCode">
            <summary>
            Filter the results of the ReqExecutions() method based on an account code.
            </summary>
            <remarks>This is only relevant for Financial Advisor (FA) accounts.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecutionFilter.Time">
            <summary>
            Filter the results of the ReqExecutions() method based on execution reports received after the specified time. 
            </summary>
            <remarks>The format for timeFilter is "yyyymmdd-hh:mm:ss"</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecutionFilter.Symbol">
            <summary>
            Filter the results of the ReqExecutions() method based on the order symbol.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecutionFilter.SecurityType">
            <summary>
            Filter the results of the ReqExecutions() method based on the order security type. 
            </summary>
            <remarks>Refer to the Contract struct for the list of valid security types.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecutionFilter.Exchange">
            <summary>
            Filter the results of the ReqExecutions() method based on the order exchange.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ExecutionFilter.Side">
            <summary>
            Filter the results of the ReqExecutions() method based on the order action. 
            </summary>
            <remarks>Refer to the Order struct for the list of valid order actions.</remarks>
        </member>
        <member name="T:Krs.Ats.IBNet.FADataType">
            <summary>
            Financial Advisor Data Message
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.FADataType.Undefined">
            <summary>
            Undefined FA Message Type
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.FADataType.Groups">
            <summary>
            Financial Advisor Groups
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.FADataType.Profiles">
            <summary>
            Financial Advisor Profiles
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.FADataType.Aliases">
            <summary>
            Financial Advisor Aliases
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.GenericTickType">
            <summary>
            Generic Ticks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.Undefined">
            <summary>
            Undefined Generic Tick Type
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.OptionVolume">
            <summary>
            Option Volume
            For stocks only.
            Returns TickType.OptionCallVolume and TickType.OptionPutVolume 
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.OptionOpenInterest">
            <summary>
            Option Open Interest
            For stocks only.
            Returns TickType.OptionCallOpenInterest and TickType.OptionPutOpenInterest
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.HistoricalVolatility">
            <summary>
            Historical Volatility
            For stocks only.
            Returns TickType.OptionHistoricalVol
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.OptionImpliedVolatility">
            <summary>
            Option Implied Volatility
            For stocks only.
            Returns TickType.OptionImpliedVol
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.IndexFuturePremium">
            <summary>
            Index Future Premium
            Returns TickType.IndexFuturePremium
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.MiscellaneousStats">
            <summary>
            Miscellaneous Stats
            Returns TickType.Low13Week, TickType.High13Week, TickType.Low26Week, TickType.High26Week, TickType.Low52Week, TickType.High52Week and TickType.AverageVolume
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.MarkPrice">
            <summary>
            Mark Price
            Used in TWS P/L Computations
            Returns TickType.MarkPrice
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.AuctionPrice">
            <summary>
            Auction Price
            Auction values (volume, price and imbalance)
            Returns TickType.AuctionVolume, TickType.AuctionPrice, TickType.AuctionImbalance
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.Shortable">
            <summary>
            Shortable Ticks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.RealTimeVolume">
            <summary>
            Real Time Volume Tick Type
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.Inventory">
            <summary>
            Inventory Type
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.GenericTickType.FundamentalRatios">
            <summary>
            Fundamental Ratios Tick Type
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.GeneralTracer">
            <summary>
            General Tracer handles the switch and writeline functions
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.GeneralTracer.WriteLineIf(System.Boolean,System.String,System.Object[])">
            <summary>
            Used for parameter based write line to the system tracer
            </summary>
            <param name="condition">Condition for writing the trace (often derived atleast in part from the switch)</param>
            <param name="message">Message containing parameter arguments</param>
            <param name="args">Prameter Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.GeneralTracer.#ctor(System.String,System.String)">
            <summary>
            Create New General Tracer
            </summary>
            <param name="displayName">The name to display on a user interface.</param>
            <param name="description">The description of the switch.</param>
        </member>
        <member name="T:Krs.Ats.IBNet.IBClient">
            <summary>
            Interactive Brokers Client
            Handles all communications to and from the TWS.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
             Raise the event in a threadsafe manner
            </summary>
            <param name="event"></param>
            <param name="sender"></param>
            <param name="e"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnTickPrice(Krs.Ats.IBNet.TickPriceEventArgs)">
            <summary>
            Called internally when the receive thread receives a tick price event.
            </summary>
            <param name="e">Tick Price event arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnTickSize(Krs.Ats.IBNet.TickSizeEventArgs)">
            <summary>
            Called internally when the receive thread receives a tick size event.
            </summary>
            <param name="e">Tick Size Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnTickOptionComputation(Krs.Ats.IBNet.TickOptionComputationEventArgs)">
            <summary>
            Called internally when the receive thread receives a tick option computation event.
            </summary>
            <param name="e">Tick Option Computation Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnTickGeneric(Krs.Ats.IBNet.TickGenericEventArgs)">
            <summary>
            Called internally when the receive thread receives a generic tick event.
            </summary>
            <param name="e">Tick Generic Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnTickString(Krs.Ats.IBNet.TickStringEventArgs)">
            <summary>
            Called internally when the receive thread receives a Tick String  event.
            </summary>
            <param name="e">Tick String Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnTickEfp(Krs.Ats.IBNet.TickEfpEventArgs)">
            <summary>
            Called internally when the receive thread receives a tick EFP event.
            </summary>
            <param name="e">Tick Efp Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnOrderStatus(Krs.Ats.IBNet.OrderStatusEventArgs)">
            <summary>
            Called internally when the receive thread receives an order status event.
            </summary>
            <param name="e">Order Status Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnOpenOrder(Krs.Ats.IBNet.OpenOrderEventArgs)">
            <summary>
            Called internally when the receive thread receives an open order event.
            </summary>
            <param name="e">Open Order Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnUpdateAccountValue(Krs.Ats.IBNet.UpdateAccountValueEventArgs)">
            <summary>
            Called internally when the receive thread receives an Update Account Value event.
            </summary>
            <param name="e">Update Account Value Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnUpdatePortfolio(Krs.Ats.IBNet.UpdatePortfolioEventArgs)">
            <summary>
            Called Internally when the receive thread receives an Update Portfolio event.
            </summary>
            <param name="e">Update Portfolio Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnUpdateAccountTime(Krs.Ats.IBNet.UpdateAccountTimeEventArgs)">
            <summary>
            Called internally when the receive thread receives an Update Account Time event.
            </summary>
            <param name="e">Update Account Time Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnNextValidId(Krs.Ats.IBNet.NextValidIdEventArgs)">
            <summary>
            Called internally when the receive thread receives a Next Valid Id event.
            </summary>
            <param name="e">Next Valid Id Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnContractDetails(Krs.Ats.IBNet.ContractDetailsEventArgs)">
            <summary>
            Called internally when the receive thread receives a contract details event.
            </summary>
            <param name="e">Contract Details Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnBondContractDetails(Krs.Ats.IBNet.BondContractDetailsEventArgs)">
            <summary>
            Called internally when the receive thread receives a Bond Contract Details Event.
            </summary>
            <param name="e">Bond Contract Details Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnContractDetailsEnd(Krs.Ats.IBNet.ContractDetailsEndEventArgs)">
            <summary>
            Called internally when the receive thread receives a Contract Details End Event.
            </summary>
            <param name="e">Contract Details End Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnOpenOrderEnd(System.EventArgs)">
            <summary>
            Called internally when the receive thread receives a Open Orders End Event.
            </summary>
            <param name="e">Empty Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnAccountDownloadEnd(Krs.Ats.IBNet.AccountDownloadEndEventArgs)">
            <summary>
            Called internally when the receive thread receives a Account Download End Event.
            </summary>
            <param name="e">Contract Details End Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnExecutionDataEnd(Krs.Ats.IBNet.ExecutionDataEndEventArgs)">
            <summary>
            Called internally when the receive thread receives a Contract Details End Event.
            </summary>
            <param name="e">Contract Details End Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnDeltaNuetralValidation(Krs.Ats.IBNet.DeltaNuetralValidationEventArgs)">
            <summary>
            Called internally when the receive thread receives a Contract Details End Event.
            </summary>
            <param name="e">Contract Details End Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnExecDetails(Krs.Ats.IBNet.ExecDetailsEventArgs)">
            <summary>
            Called internally when the receive thread receives an execution details event.
            </summary>
            <param name="e">Execution Details Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnUpdateMarketDepth(Krs.Ats.IBNet.UpdateMarketDepthEventArgs)">
            <summary>
            Called internally when the receive thread receives an update market depth event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnUpdateMarketDepthL2(Krs.Ats.IBNet.UpdateMarketDepthL2EventArgs)">
            <summary>
            Called internally when the receive thread receives an update market depth level 2 event.
            </summary>
            <param name="e">Update Market Depth L2 Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnReportException(Krs.Ats.IBNet.ReportExceptionEventArgs)">
            <summary>
            Called internally when a exception is being thrown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnUpdateNewsBulletin(Krs.Ats.IBNet.UpdateNewsBulletinEventArgs)">
            <summary>
            Called internally when the receive thread receives an update news bulletin event.
            </summary>
            <param name="e">Update News Bulletin Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnManagedAccounts(Krs.Ats.IBNet.ManagedAccountsEventArgs)">
            <summary>
            Called internally when the receive thread receives a managed accounts event.
            </summary>
            <param name="e">Managed Accounts Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnReceiveFA(Krs.Ats.IBNet.ReceiveFAEventArgs)">
            <summary>
            Called internally when the receive thread receives a Receive Finanvial Advisor event.
            </summary>
            <param name="e">Receive FA Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnHistoricalData(Krs.Ats.IBNet.HistoricalDataEventArgs)">
            <summary>
            Called internally when the receive thread receives a tick price event.
            </summary>
            <param name="e">Historical Data Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnScannerParameters(Krs.Ats.IBNet.ScannerParametersEventArgs)">
            <summary>
            Called internally when the receive thread receives a scanner parameters event.
            </summary>
            <param name="e">Scanner Parameters Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnScannerData(Krs.Ats.IBNet.ScannerDataEventArgs)">
            <summary>
            Called internally when the receive thread receives a tick price event.
            </summary>
            <param name="e">Scanner Data Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnScannerDataEnd(Krs.Ats.IBNet.ScannerDataEndEventArgs)">
            <summary>
            Called internally when the receive thread receives a tick price event.
            </summary>
            <param name="e">Scanner Data Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnRealTimeBar(Krs.Ats.IBNet.RealTimeBarEventArgs)">
            <summary>
            Called internally when the receive thread receives a real time bar event.
            </summary>
            <param name="e">Real Time Bar Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnCurrentTime(Krs.Ats.IBNet.CurrentTimeEventArgs)">
            <summary>
            Called internally when the receive thread receives a current time event.
            </summary>
            <param name="e">Current Time Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnFundamentalData(Krs.Ats.IBNet.FundamentalDetailsEventArgs)">
            <summary>
            Called internally when the receive thread receives a fundamental data event.
            </summary>
            <param name="e">Fundamental Data Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnMarketDataType(Krs.Ats.IBNet.MarketDataTypeEventArgs)">
            <summary>
            Called internally when the receive thread receives a Market Data Type Event.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnError(Krs.Ats.IBNet.ErrorEventArgs)">
            <summary>
            Called internally when the receive thread receives an error event.
            </summary>
            <param name="e">Error Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnConnectionClosed(Krs.Ats.IBNet.ConnectionClosedEventArgs)">
            <summary>
            Called internally when the receive thread receives a connection closed event.
            </summary>
            <param name="e">Connection Closed Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.OnTickSnapshotEnd(Krs.Ats.IBNet.TickSnapshotEndEventArgs)">
            <summary>
            Called internally when the receive thread receives a Tick Snapshot End Event.
            </summary>
            <param name="e">Contract Details End Event Arguments</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.Dispose">
            <summary>
            Dispose() calls Dispose(true)
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.Dispose(System.Boolean)">
            <summary>
            The bulk of the clean-up code is implemented in Dispose(bool)
            </summary>
            <param name="disposing">Allows the ondispose method to override the dispose action.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.Connect(System.String,System.Int32,System.Int32)">
            <summary>
            This function must be called before any other. There is no feedback for a successful connection, but a subsequent attempt to connect will return the message "Already connected."
            </summary>
            <param name="host">host name or IP address of the machine where TWS is running. Leave blank to connect to the local host.</param>
            <param name="port">must match the port specified in TWS on the Configure>API>Socket Port field.</param>
            <param name="clientId">A number used to identify this client connection. All orders placed/modified from this client will be associated with this client identifier.
            Each client MUST connect with a unique clientId.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.Disconnect">
            <summary>
            Call this method to terminate the connections with TWS. Calling this method does not cancel orders that have already been sent.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.CancelScannerSubscription(System.Int32)">
            <summary>
            Call the cancelScannerSubscription() method to stop receiving market scanner results. 
            </summary>
            <param name="tickerId">the Id that was specified in the call to reqScannerSubscription().</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestScannerParameters">
            <summary>
            Call the reqScannerParameters() method to receive an XML document that describes the valid parameters that a scanner subscription can have.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestScannerSubscription(System.Int32,Krs.Ats.IBNet.ScannerSubscription)">
            <summary>
            Call the reqScannerSubscription() method to start receiving market scanner results through the scannerData() EWrapper method. 
            </summary>
            <param name="tickerId">the Id for the subscription. Must be a unique value. When the subscription  data is received, it will be identified by this Id. This is also used when canceling the scanner.</param>
            <param name="subscription">summary of the scanner subscription parameters including filters.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestMarketData(System.Int32,Krs.Ats.IBNet.Contract,System.Collections.ObjectModel.Collection{Krs.Ats.IBNet.GenericTickType},System.Boolean,System.Boolean)">
            <summary>
            Call this method to request market data. The market data will be returned by the tickPrice, tickSize, tickOptionComputation(), tickGeneric(), tickString() and tickEFP() methods.
            </summary>
            <param name="tickerId">the ticker id. Must be a unique value. When the market data returns, it will be identified by this tag. This is also used when canceling the market data.</param>
            <param name="contract">this structure contains a description of the contract for which market data is being requested.</param>
            <param name="genericTickList">comma delimited list of generic tick types.  Tick types can be found here: (new Generic Tick Types page) </param>
            <param name="snapshot">Allows client to request snapshot market data.</param>
            <param name="marketDataOff">Market Data Off - used in conjunction with RTVolume Generic tick type causes only volume data to be sent.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.CancelHistoricalData(System.Int32)">
            <summary>
            Call the CancelHistoricalData method to stop receiving historical data results.
            </summary>
            <param name="tickerId">the Id that was specified in the call to <see cref="M:Krs.Ats.IBNet.IBClient.RequestHistoricalData(System.Int32,Krs.Ats.IBNet.Contract,System.DateTime,System.TimeSpan,Krs.Ats.IBNet.BarSize,Krs.Ats.IBNet.HistoricalDataType,System.Int32)"/>.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.CancelRealTimeBars(System.Int32)">
            <summary>
            Call the CancelRealTimeBars() method to stop receiving real time bar results. 
            </summary>
            <param name="tickerId">The Id that was specified in the call to <see cref="M:Krs.Ats.IBNet.IBClient.RequestRealTimeBars(System.Int32,Krs.Ats.IBNet.Contract,System.Int32,Krs.Ats.IBNet.RealTimeBarType,System.Boolean)"/>.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestHistoricalData(System.Int32,Krs.Ats.IBNet.Contract,System.DateTime,System.TimeSpan,Krs.Ats.IBNet.BarSize,Krs.Ats.IBNet.HistoricalDataType,System.Int32)">
            <summary>
            Call the reqHistoricalData() method to start receiving historical data results through the historicalData() EWrapper method. 
            </summary>
            <param name="tickerId">the Id for the request. Must be a unique value. When the data is received, it will be identified by this Id. This is also used when canceling the historical data request.</param>
            <param name="contract">this structure contains a description of the contract for which market data is being requested.</param>
            <param name="endDateTime">Date is sent after a .ToUniversalTime, so make sure the kind property is set correctly, and assumes GMT timezone. Use the format yyyymmdd hh:mm:ss tmz, where the time zone is allowed (optionally) after a space at the end.</param>
            <param name="duration">This is the time span the request will cover, and is specified using the format:
            <integer /> <unit />, i.e., 1 D, where valid units are:
            S (seconds)
            D (days)
            W (weeks)
            M (months)
            Y (years)
            If no unit is specified, seconds are used. "years" is currently limited to one.
            </param>
            <param name="barSizeSetting">
            specifies the size of the bars that will be returned (within IB/TWS limits). Valid values include:
            <list type="table">
            <listheader>
                <term>Bar Size</term>
                <description>Parametric Value</description>
            </listheader>
            <item>
                <term>1 sec</term>
                <description>1</description>
            </item>
            <item>
                <term>5 secs</term>
                <description>2</description>
            </item>
            <item>
                <term>15 secs</term>
                <description>3</description>
            </item>
            <item>
                <term>30 secs</term>
                <description>4</description>
            </item>
            <item>
                <term>1 min</term>
                <description>5</description>
            </item>
            <item>
                <term>2 mins</term>
                <description>6</description>
            </item>
            <item>
                <term>5 mins</term>
                <description>7</description>
            </item>
            <item>
                <term>15 mins</term>
                <description>8</description>
            </item>
            <item>
                <term>30 mins</term>
                <description>9</description>
            </item>
            <item>
                <term>1 hour</term>
                <description>10</description>
            </item>
            <item>
                <term>1 day</term>
                <description>11</description>
            </item>
            <item>
                <term>1 week</term>
                <description></description>
            </item>
            <item>
                <term>1 month</term>
                <description></description>
            </item>
            <item>
                <term>3 months</term>
                <description></description>
            </item>
            <item>
                <term>1 year</term>
                <description></description>
            </item>
            </list>
            </param>
            <param name="whatToShow">determines the nature of data being extracted. Valid values include:
            TRADES
            MIDPOINT
            BID
            ASK
            BID/ASK
            </param>
            <param name="useRth">
            determines whether to return all data available during the requested time span, or only data that falls within regular trading hours. Valid values include:
            0 - all data is returned even where the market in question was outside of its regular trading hours.
            1 - only data within the regular trading hours is returned, even if the requested time span falls partially or completely outside of the RTH.
            </param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.ConvertPeriodtoIb(System.DateTime,System.DateTime)">
            <summary>
            used for reqHistoricalData
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestHistoricalData(System.Int32,Krs.Ats.IBNet.Contract,System.DateTime,System.String,Krs.Ats.IBNet.BarSize,Krs.Ats.IBNet.HistoricalDataType,System.Int32)">
            <summary>
            Call the reqHistoricalData() method to start receiving historical data results through the historicalData() EWrapper method. 
            </summary>
            <param name="tickerId">the Id for the request. Must be a unique value. When the data is received, it will be identified by this Id. This is also used when canceling the historical data request.</param>
            <param name="contract">this structure contains a description of the contract for which market data is being requested.</param>
            <param name="endDateTime">Date is sent after a .ToUniversalTime, so make sure the kind property is set correctly, and assumes GMT timezone. Use the format yyyymmdd hh:mm:ss tmz, where the time zone is allowed (optionally) after a space at the end.</param>
            <param name="duration">This is the time span the request will cover, and is specified using the format:
            <integer /> <unit />, i.e., 1 D, where valid units are:
            S (seconds)
            D (days)
            W (weeks)
            M (months)
            Y (years)
            If no unit is specified, seconds are used. "years" is currently limited to one.
            </param>
            <param name="barSizeSetting">
            specifies the size of the bars that will be returned (within IB/TWS limits). Valid values include:
            <list type="table">
            <listheader>
                <term>Bar Size</term>
                <description>Parametric Value</description>
            </listheader>
            <item>
                <term>1 sec</term>
                <description>1</description>
            </item>
            <item>
                <term>5 secs</term>
                <description>2</description>
            </item>
            <item>
                <term>15 secs</term>
                <description>3</description>
            </item>
            <item>
                <term>30 secs</term>
                <description>4</description>
            </item>
            <item>
                <term>1 min</term>
                <description>5</description>
            </item>
            <item>
                <term>2 mins</term>
                <description>6</description>
            </item>
            <item>
                <term>5 mins</term>
                <description>7</description>
            </item>
            <item>
                <term>15 mins</term>
                <description>8</description>
            </item>
            <item>
                <term>30 mins</term>
                <description>9</description>
            </item>
            <item>
                <term>1 hour</term>
                <description>10</description>
            </item>
            <item>
                <term>1 day</term>
                <description>11</description>
            </item>
            <item>
                <term>1 week</term>
                <description></description>
            </item>
            <item>
                <term>1 month</term>
                <description></description>
            </item>
            <item>
                <term>3 months</term>
                <description></description>
            </item>
            <item>
                <term>1 year</term>
                <description></description>
            </item>
            </list>
            </param>
            <param name="whatToShow">determines the nature of data being extracted. Valid values include:
            TRADES
            MIDPOINT
            BID
            ASK
            BID/ASK
            </param>
            <param name="useRth">
            determines whether to return all data available during the requested time span, or only data that falls within regular trading hours. Valid values include:
            0 - all data is returned even where the market in question was outside of its regular trading hours.
            1 - only data within the regular trading hours is returned, even if the requested time span falls partially or completely outside of the RTH.
            </param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestContractDetails(System.Int32,Krs.Ats.IBNet.Contract)">
            <summary>
            Call this function to download all details for a particular underlying. the contract details will be received via the contractDetails() function on the EWrapper.
            </summary>
            <param name="requestId">Request Id for Contract Details</param>
            <param name="contract">summary description of the contract being looked up.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestRealTimeBars(System.Int32,Krs.Ats.IBNet.Contract,System.Int32,Krs.Ats.IBNet.RealTimeBarType,System.Boolean)">
            <summary>
            Call the reqRealTimeBars() method to start receiving real time bar results through the realtimeBar() EWrapper method.
            </summary>
            <param name="tickerId">The Id for the request. Must be a unique value. When the data is received, it will be identified
            by this Id. This is also used when canceling the historical data request.</param>
            <param name="contract">This structure contains a description of the contract for which historical data is being requested.</param>
            <param name="barSize">Currently only 5 second bars are supported, if any other value is used, an exception will be thrown.</param>
            <param name="whatToShow">Determines the nature of the data extracted. Valid values include:
            TRADES
            BID
            ASK
            MIDPOINT
            </param>
            <param name="useRth">useRth – Regular Trading Hours only. Valid values include:
            0 = all data available during the time span requested is returned, including time intervals when the market in question was outside of regular trading hours.
            1 = only data within the regular trading hours for the product requested is returned, even if the time time span falls partially or completely outside.
            </param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestMarketDepth(System.Int32,Krs.Ats.IBNet.Contract,System.Int32)">
            <summary>
            Call this method to request market depth for a specific contract. The market depth will be returned by the updateMktDepth() and updateMktDepthL2() methods.
            </summary>
            <param name="tickerId">the ticker Id. Must be a unique value. When the market depth data returns, it will be identified by this tag. This is also used when canceling the market depth.</param>
            <param name="contract">this structure contains a description of the contract for which market depth data is being requested.</param>
            <param name="numberOfRows">specifies the number of market depth rows to return.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.CancelMarketData(System.Int32)">
            <summary>
            After calling this method, market data for the specified Id will stop flowing.
            </summary>
            <param name="tickerId">the Id that was specified in the call to reqMktData().</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.CancelMarketDepth(System.Int32)">
            <summary>
            After calling this method, market depth data for the specified Id will stop flowing.
            </summary>
            <param name="tickerId">the Id that was specified in the call to reqMktDepth().</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.ExerciseOptions(System.Int32,Krs.Ats.IBNet.Contract,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Call the exerciseOptions() method to exercise options. 
            “SMART” is not an allowed exchange in exerciseOptions() calls, and that TWS does a moneyness request for the position in question whenever any API initiated exercise or lapse is attempted.
            </summary>
            <param name="tickerId">the Id for the exercise request.</param>
            <param name="contract">this structure contains a description of the contract to be exercised.  If no multiplier is specified, a default of 100 is assumed.</param>
            <param name="exerciseAction">this can have two values:
            1 = specifies exercise
            2 = specifies lapse
            </param>
            <param name="exerciseQuantity">the number of contracts to be exercised</param>
            <param name="account">specifies whether your setting will override the system's natural action. For example, if your action is "exercise" and the option is not in-the-money, by natural action the option would not exercise. If you have override set to "yes" the natural action would be overridden and the out-of-the money option would be exercised. Values are: 
            0 = no
            1 = yes
            </param>
            <param name="overrideRenamed">
            specifies whether your setting will override the system's natural action. For example, if your action is "exercise" and the option is not in-the-money, by natural action the option would not exercise. If you have override set to "yes" the natural action would be overridden and the out-of-the money option would be exercised. Values are: 
            0 = no
            1 = yes
            </param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.PlaceOrder(System.Int32,Krs.Ats.IBNet.Contract,Krs.Ats.IBNet.Order)">
            <summary>
            Call this method to place an order. The order status will be returned by the orderStatus event.
            </summary>
            <param name="orderId">the order Id. You must specify a unique value. When the order status returns, it will be identified by this tag. This tag is also used when canceling the order.</param>
            <param name="contract">this structure contains a description of the contract which is being traded.</param>
            <param name="order">this structure contains the details of the order.
            Each client MUST connect with a unique clientId.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestAccountUpdates(System.Boolean,System.String)">
            <summary>
            Call this function to start getting account values, portfolio, and last update time information.
            </summary>
            <param name="subscribe">If set to TRUE, the client will start receiving account and portfolio updates. If set to FALSE, the client will stop receiving this information.</param>
            <param name="acctCode">the account code for which to receive account and portfolio updates.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestExecutions(System.Int32,Krs.Ats.IBNet.ExecutionFilter)">
            <summary>
            When this method is called, the execution reports that meet the filter criteria are downloaded to the client via the execDetails() method.
            </summary>
            <param name="requestId">Id of the request</param>
            <param name="filter">the filter criteria used to determine which execution reports are returned.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.CancelOrder(System.Int32)">
            <summary>
            Call this method to cancel an order.
            </summary>
            <param name="orderId">Call this method to cancel an order.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestOpenOrders">
            <summary>
            Call this method to request the open orders that were placed from this client. Each open order will be fed back through the openOrder() and orderStatus() functions on the EWrapper.
            
            The client with a clientId of "0" will also receive the TWS-owned open orders. These orders will be associated with the client and a new orderId will be generated. This association will persist over multiple API and TWS sessions.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestIds(System.Int32)">
            <summary>
            Returns one next valid Id...
            </summary>
            <param name="numberOfIds">Has No Effect</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestNewsBulletins(System.Boolean)">
            <summary>
            Call this method to start receiving news bulletins. Each bulletin will be returned by the updateNewsBulletin() method.
            </summary>
            <param name="allMessages">if set to TRUE, returns all the existing bulletins for the current day and any new ones. IF set to FALSE, will only return new bulletins.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.CancelNewsBulletins">
            <summary>
            Call this method to stop receiving news bulletins.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestAutoOpenOrders(System.Boolean)">
            <summary>
            Call this method to request that newly created TWS orders be implicitly associated with the client. When a new TWS order is created, the order will be associated with the client and fed back through the openOrder() and orderStatus() methods on the EWrapper.
            
            TWS orders can only be bound to clients with a clientId of “0”.
            </summary>
            <param name="autoBind">If set to TRUE, newly created TWS orders will be implicitly associated with the client. If set to FALSE, no association will be made.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestAllOpenOrders">
            <summary>
            Call this method to request the open orders that were placed from all clients and also from TWS. Each open order will be fed back through the openOrder() and orderStatus() functions on the EWrapper.
            
            No association is made between the returned orders and the requesting client.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestManagedAccts">
            <summary>
            Call this method to request the list of managed accounts. The list will be returned by the managedAccounts() function on the EWrapper.
            
            This request can only be made when connected to a Financial Advisor (FA) account.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestFA(Krs.Ats.IBNet.FADataType)">
            <summary>
            Call this method to request FA configuration information from TWS. The data returns in an XML string via the receiveFA() method.
            </summary>
            <param name="faDataType">
            faDataType - specifies the type of Financial Advisor configuration data being requested. Valid values include:
            1 = GROUPS
            2 = PROFILE
            3 =ACCOUNT ALIASES
            </param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.ReplaceFA(Krs.Ats.IBNet.FADataType,System.String)">
            <summary>
            Call this method to request FA configuration information from TWS. The data returns in an XML string via a "receiveFA" ActiveX event.  
            </summary>
            <param name="faDataType">
            specifies the type of Financial Advisor configuration data being requested. Valid values include:
            1 = GROUPS
            2 = PROFILE
            3 = ACCOUNT ALIASES</param>
            <param name="xml">the XML string containing the new FA configuration information.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestCurrentTime">
            <summary>
            Returns the current system time on the server side.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestFundamentalData(System.Int32,Krs.Ats.IBNet.Contract,System.String)">
            <summary>
            Request Fundamental Data
            </summary>
            <param name="requestId">Request Id</param>
            <param name="contract">Contract to request fundamental data for</param>
            <param name="reportType">Report Type</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.CancelFundamentalData(System.Int32)">
            <summary>
            Call this method to stop receiving Reuters global fundamental data.
            </summary>
            <param name="requestId">The ID of the data request.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.RequestCalculateImpliedVolatility(System.Int32,Krs.Ats.IBNet.Contract,System.Double,System.Double)">
            <summary>
            Calculates the Implied Volatility based on the user-supplied option and underlying prices.
            The calculated implied volatility is returned by tickOptionComputation( ) in a new tick type, CUST_OPTION_COMPUTATION, which is described below.
            </summary>
            <param name="requestId">Request Id</param>
            <param name="contract">Contract</param>
            <param name="optionPrice">Price of the option</param>
            <param name="underPrice">Price of teh underlying of the option</param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.SetServerLogLevel(Krs.Ats.IBNet.LogLevel)">
            <summary>
            The default level is ERROR. Refer to the API logging page for more details.
            </summary>
            <param name="serverLogLevel">
            logLevel - specifies the level of log entry detail used by the server (TWS) when processing API requests. Valid values include: 
            1 = SYSTEM
            2 = ERROR
            3 = WARNING
            4 = INFORMATION
            5 = DETAIL
            </param>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="source">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="F:Krs.Ats.IBNet.IBClient.stopLock">
            <summary>
            Lock covering stopping and stopped
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IBClient.stopped">
            <summary>
            Whether or not the worker thread has stopped
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IBClient.stopping">
            <summary>
            Whether or not the worker thread has been asked to stop
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.Stop">
            <summary>
            Tells the worker thread to stop, typically after completing its 
            current work item. (The thread is *not* guaranteed to have stopped
            by the time this method returns.)
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.SetStopped">
            <summary>
            Called by the worker thread to indicate when it has stopped.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.Run">
            <summary>
            Contains the reader thread.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.Start">
            <summary>
            Forks the reading thread
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.IBClient.ProcessMsg(Krs.Ats.IBNet.IncomingMessage)">
            <summary>Overridden in subclass.</summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.TickPrice">
            <summary>
            This event is called when the market data changes. Prices are updated immediately with no delay.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.TickSize">
            <summary>
            This event is called when the market data changes. Sizes are updated immediately with no delay.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.TickOptionComputation">
            <summary>
            This method is called when the market in an option or its underlier moves.
            TWS’s option model volatilities, prices, and deltas, along with the present
            value of dividends expected on that option’s underlier are received.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.TickGeneric">
            <summary>
            This method is called when the market data changes. Values are updated immediately with no delay.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.TickString">
            <summary>
            This method is called when the market data changes. Values are updated immediately with no delay.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.TickEfp">
            <summary>
            This method is called when the market data changes. Values are updated immediately with no delay.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.OrderStatus">
            <summary>
            This methodis called whenever the status of an order changes. It is also fired after reconnecting
            to TWS if the client has any open orders.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.OpenOrder">
            <summary>
            This method is called to feed in open orders.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.UpdateAccountValue">
            <summary>
            This method is called only when reqAccountUpdates() method on the EClientSocket object has been called.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.UpdatePortfolio">
            <summary>
            This method is called only when reqAccountUpdates() method on the EClientSocket object has been called.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.UpdateAccountTime">
            <summary>
            This method is called only when reqAccountUpdates() method on the EClientSocket object has been called.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.NextValidId">
            <summary>
            This method is called after a successful connection to TWS.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ContractDetails">
            <summary>
            This event fires in response to the <see cref="M:Krs.Ats.IBNet.IBClient.RequestContractDetails(System.Int32,Krs.Ats.IBNet.Contract)"/> method.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.BondContractDetails">
            <summary>
            This event fires in response to the <see cref="M:Krs.Ats.IBNet.IBClient.RequestContractDetails(System.Int32,Krs.Ats.IBNet.Contract)"/> method called on a bond contract.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ContractDetailsEnd">
            <summary>
            Called once all contract details for a given request are received.
            This, for example, helps to define the end of an option chain.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.OpenOrderEnd">
            <summary>
            Called once all the open orders for a given request are received.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.AccountDownloadEnd">
            <summary>
            Called once all Account Details for a given request are received.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ExecutionDataEnd">
            <summary>
            Called once all contract details for a given request are received.
            This, for example, helps to define the end of an option chain.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.DeltaNuetralValidation">
            <summary>
            Called once all execution data for a given request are received.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ExecDetails">
            <summary>
            This event fires in response to the <see cref="M:Krs.Ats.IBNet.IBClient.RequestExecutions(System.Int32,Krs.Ats.IBNet.ExecutionFilter)"/> method or after an order is placed.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.UpdateMarketDepth">
            <summary>
            This method is called when the market depth changes.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.UpdateMarketDepthL2">
            <summary>
            This method is called when the Level II market depth changes.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ReportException">
            <summary>
            This method is triggered for any exceptions caught.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.UpdateNewsBulletin">
            <summary>
            This method is triggered for each new bulletin if the client has subscribed (i.e. by calling the reqNewsBulletins() method.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ManagedAccounts">
            <summary>
            This method is called when a successful connection is made to a Financial Advisor account.
            It is also called when the reqManagedAccts() method is invoked.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ReceiveFA">
            <summary>
            This method receives previously requested FA configuration information from TWS.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.HistoricalData">
            <summary>
            This method receives the requested historical data results
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ScannerParameters">
            <summary>
            This method receives an XML document that describes the valid parameters that a scanner subscription can have
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ScannerData">
            <summary>
            This method receives the requested market scanner data results
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ScannerDataEnd">
            <summary>
            This method receives the requested market scanner data results
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.RealTimeBar">
            <summary>
            This method receives the realtime bars data results.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.CurrentTime">
            <summary>
            This method receives the current system time on the server side.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.FundamentalData">
            <summary>
            Reuters global fundamental market data
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.MarketDataType">
            <summary>
            Called on a market data type call back.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.Error">
            <summary>
            This event is fired when there is an error with the communication or when TWS wants to send a message to the client.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.ConnectionClosed">
            <summary>
            This method is called when TWS closes the sockets connection, or when TWS is shut down.
            </summary>
        </member>
        <member name="E:Krs.Ats.IBNet.IBClient.TickSnapshotEnd">
            <summary>
            Called once the tick snap shot is complete.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.IBClient.ThrowExceptions">
            <summary>
            Used to control the exception handling.
            If true, all exceptions are thrown, else only throw non network exceptions.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.IBClient.Connected">
            <summary>
            Returns the status of the connection to TWS.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.IBClient.ServerVersion">
            <summary>
            Returns the version of the TWS instance the API application is connected to
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.IBClient.ClientVersion">
            <summary>
            Returns the client version of the TWS API
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.IBClient.TwsConnectionTime">
            <summary>
            Returns the time the API application made a connection to TWS
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.IBClient.ReadThread">
            <summary>
            Thread that is reading and parsing the network stream
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.IBClient.Stopping">
            <summary>
            Returns whether the worker thread has been asked to stop.
            This continues to return true even after the thread has stopped.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.IBClient.Stopped">
            <summary>
            Returns whether the worker thread has stopped.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.NextValidIdEventArgs">
            <summary>
            Next Valid Id Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.NextValidIdEventArgs.#ctor(System.Int32)">
            <summary>
            Full Constructor
            </summary>
            <param name="orderId">The next available order Id received from TWS upon connection.
            Increment all successive orders by one based on this Id.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.NextValidIdEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.NextValidIdEventArgs.OrderId">
            <summary>
            The next available order Id received from TWS upon connection.
            Increment all successive orders by one based on this Id.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.OpenOrderEventArgs">
            <summary>
            Open Order Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.OpenOrderEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.Contract,Krs.Ats.IBNet.Order,Krs.Ats.IBNet.OrderState)">
            <summary>
            Full Constructor
            </summary>
            <param name="orderId">The order Id assigned by TWS. Used to cancel or update the order.</param>
            <param name="contract">Describes the contract for the open order.</param>
            <param name="order">Gives the details of the open order.</param>
            <param name="orderState">The openOrder() callback with the new OrderState() object will now be invoked each time TWS receives commission information for a trade.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.OpenOrderEventArgs.#ctor">
            <summary>
             Parameterless OpenOrderEventArgs Constructor
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OpenOrderEventArgs.OrderId">
            <summary>
            The order Id assigned by TWS. Used to cancel or update the order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OpenOrderEventArgs.Contract">
            <summary>
            Describes the contract for the open order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OpenOrderEventArgs.Order">
            <summary>
            Gives the details of the open order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OpenOrderEventArgs.OrderState">
            <summary>
            The openOrder() callback with the new OrderState() object will
            now be invoked each time TWS receives commission information for a trade.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ErrorMessage">
            <summary>
            Contains all of the standard Interactive Brokers error messages.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.Undefined">
            <summary>
            Undefined Error Message
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.AlreadyConnected">
            <summary>
            Already connected.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.ConnectFail">
            <summary>
            Couldn't connect to TWS.  Confirm that \"Enable ActiveX and Socket Clients\" is enabled on the TWS \"Configure->API\" menu.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.UpdateTws">
            <summary>
            The TWS is out of date and must be upgraded.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.NotConnected">
            <summary>
            Not connected
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.UnknownId">
            <summary>
            Fatal Error: Unknown message id.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestMarket">
            <summary>
            Request Market Data Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendCancelMarket">
            <summary>
            Cancel Market Data Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendOrder">
            <summary>
            Order Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendAccountUpdate">
            <summary>
            Account Update Request Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendExecution">
            <summary>
            Request For Executions Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendCancelOrder">
            <summary>
            Cancel Order Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendOpenOrder">
            <summary>
            Request Open Order Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.UnknownContract">
            <summary>
            Unknown contract. Verify the contract details supplied.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestContract">
            <summary>
            Request Contract Data Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestMarketDepth">
            <summary>
            Request Market Depth Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendCancelMarketDepth">
            <summary>
            Cancel Market Depth Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendServerLogLevel">
            <summary>
            Set Server Log Level Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendFARequest">
            <summary>
            FA Information Request Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendFAReplace">
            <summary>
            FA Information Replace Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestScanner">
            <summary>
            Request Scanner Subscription Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendCancelScanner">
            <summary>
            Cancel Scanner Subscription Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestScannerParameters">
            <summary>
            Request Scanner Parameter Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestHistoricalData">
            <summary>
            Request Historical Data Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendCancelHistoricalData">
            <summary>
            Cancel Historical Data Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestRealTimeBars">
            <summary>
            Request Real-time Bar Data Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendCancelRealTimeBars">
            <summary>
            Cancel Real-time Bar Data Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestCurrentTime">
            <summary>
            Request Current Time Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestFundData">
            <summary>
            Failed to send fundamental data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendCancelFundData">
            <summary>
            Cancel Fundamental Data Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendReqCalcImpliedVolatility">
            <summary>
            Failed to send Request to Calculate Implied Volatility
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestCalcOptionPrice">
            <summary>
            Request Calculate Option Price Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendCancelCalculateImpliedVolatility">
            <summary>
            Cancel Calculate Implied Volatility Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendCancelCalculateOptionPrice">
            <summary>
            Cancel Calculate Option Price Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestGlobalCancel">
            <summary>
            Request Global Cancel Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.FailSendRequestMarketDataType">
            <summary>
            Request Market Data Type Sending Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.ErrorMessage.NoValidId">
            <summary>
            No Valid ID for error message
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.IncomingMessage">
            <summary>
            incoming msg id's
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.Undefined">
            <summary>
            Undefined Incoming Message
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.TickPrice">
            <summary>
            Tick Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.TickSize">
            <summary>
            Tick Size
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.OrderStatus">
            <summary>
            Order Status
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.ErrorMessage">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.OpenOrder">
            <summary>
            Open Order
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.AccountValue">
            <summary>
            Account Value
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.PortfolioValue">
            <summary>
            Portfolio Value
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.AccountUpdateTime">
            <summary>
            Account Update Time
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.NextValidId">
            <summary>
            Next Valid ID
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.ContractData">
            <summary>
            Contract Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.ExecutionData">
            <summary>
            Execution Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.MarketDepth">
            <summary>
            Market Depth
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.MarketDepthL2">
            <summary>
            Market Depth L2
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.NewsBulletins">
            <summary>
            News Bulletins
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.ManagedAccounts">
            <summary>
            Managed Accounts
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.ReceiveFA">
            <summary>
            Receive Financial Advice
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.HistoricalData">
            <summary>
            Historical Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.BondContractData">
            <summary>
            Bond Contract Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.ScannerParameters">
            <summary>
            Scanner Parameters
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.ScannerData">
            <summary>
            Scanner Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.TickOptionComputation">
            <summary>
            Tick Option Computation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.TickGeneric">
            <summary>
            Tick Generic
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.TickString">
            <summary>
            Tick String
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.TickEfp">
            <summary>
            Tick Exchange for Physical(EFP)
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.CurrentTime">
            <summary>
            Current Time
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.RealTimeBars">
            <summary>
            Real Time Bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.FundamentalData">
            <summary>
            Fundamental Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.ContractDataEnd">
            <summary>
            Contract Data End
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.OpenOrderEnd">
            <summary>
            Received after the last open order message
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.AccountDownloadEnd">
            <summary>
            Received after the last account download message
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.ExecutionDataEnd">
            <summary>
            Received after a complete list of executions
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.DeltaNuetralValidation">
            <summary>
            Received after a delta nuetral validation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.TickSnapshotEnd">
            <summary>
            End of Tick Snapshot message
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.IncomingMessage.MarketDataType">
            <summary>
            Market Data Type
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.Order">
            <summary>
            Order class passed to Interactive Brokers to place an order.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.Order.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.OrderId">
            <summary>
            The id for this order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ClientId">
            <summary>
            The id of the client that placed this order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.PermId">
            <summary>
            The TWS id used to identify orders, remains the same over TWS sessions.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.Action">
            <summary>
            Identifies the side. Valid values are: BUY, SELL, SSHORT
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.TotalQuantity">
            <summary>
            The order quantity.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.OrderType">
            <summary>
            The order type.
            </summary>
            <seealso cref="P:Krs.Ats.IBNet.Order.OrderType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.LimitPrice">
            <summary>
            This is the LIMIT price, used for limit, stop-limit and relative orders.
            In all other cases specify zero. For relative orders with no limit price,
            also specify zero.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.AuxPrice">
            <summary>
            This is the STOP price for stop-limit orders, and the offset amount for
            relative orders. In all other cases, specify zero.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.Tif">
            <summary>
            The time in force.
            </summary>
            <remarks>Valid values are: DAY, GTC, IOC, GTD.</remarks>
            <seealso cref="T:Krs.Ats.IBNet.TimeInForce"/>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.OcaGroup">
            <summary>
            Identifies an OCA (one cancels all) group.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.OcaType">
            <summary>
            Tells how to handle remaining orders in an OCA group when one order or part of an order executes.
            </summary>
            <remarks>
            Valid values include:
            <list type="bullet">
            <item>1 = Cancel all remaining orders with block.</item>
            <item>2 = Remaining orders are proportionately reduced in size with block.</item>
            <item>3 = Remaining orders are proportionately reduced in size with no block.</item>
            </list>
            If you use a value "with block"gives your order has overfill protection. This means  that only one order in the group will be routed at a time to remove the possibility of an overfill.
            </remarks>
            <seealso cref="P:Krs.Ats.IBNet.Order.OcaType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.OrderRef">
            <summary>
            The order reference. For institutional customers only.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.Transmit">
            <summary>
            Specifies whether the order will be transmitted by TWS.
            If set to false, the order will be created at TWS but will not be sent.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ParentId">
            <summary>
            The order ID of the parent order, used for bracket and auto trailing stop orders.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.BlockOrder">
            <summary>
            If set to true, specifies that the order is an ISE Block order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.SweepToFill">
            <summary>
            If set to true, specifies that the order is a Sweep-to-Fill order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.DisplaySize">
            <summary>
            The publicly disclosed order size, used when placing Iceberg orders.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.TriggerMethod">
            <summary>
            Specifies how Simulated Stop, Stop-Limit and Trailing Stop orders are triggered.
            </summary>
            <remarks>
            Valid values are:
            <list type="bullet">
            <item>0 - the default value. The "double bid/ask" method will be used for orders for OTC stocks and US options. All other orders will used the "last" method.</item>
            <item>1 - use "double bid/ask" method, where stop orders are triggered based on two consecutive bid or ask prices.</item>
            <item>2 - "last" method, where stop orders are triggered based on the last price.</item>
            <item>3 - double last method.</item>
            <item>4 - bid/ask method.</item>
            <item>7 - last or bid/ask method.</item>
            <item>8 - mid-point method.</item>
            </list>
            </remarks>
            <seealso cref="P:Krs.Ats.IBNet.Order.TriggerMethod"/>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.OutsideRth">
            <summary>
            If set to true, allows triggering of orders outside of regular trading hours.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.Hidden">
            <summary>
            If set to true, the order will not be visible when viewing the market depth.
            This option only applies to orders routed to the ISLAND exchange.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.GoodAfterTime">
            <summary>
            The trade's "Good After Time"
            </summary>
            <remarks>format "YYYYMMDD hh:mm:ss (optional time zone)" 
            Use an empty String if not applicable.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.GoodTillDate">
            <summary>
            You must enter a Time in Force value of Good Till Date.
            </summary>
            <remarks>The trade's "Good Till Date," format is:
            YYYYMMDD hh:mm:ss (optional time zone)
            Use an empty String if not applicable.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.OverridePercentageConstraints">
            <summary>
            If set, allows you to override TWS order price percentage constraints set to
            reject orders that deviate too far from the NBBO. This precaution was created
            to avoid transmitting orders with an incorrect price. 
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.Rule80A">
            <summary>
            This identifies what type of trader you are.
            </summary>
            <remarks>Rule80A required you to identify which type of trader you are.</remarks>
            <seealso cref="T:Krs.Ats.IBNet.AgentDescription"/>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.AllOrNone">
            <summary>
            yes=1, no=0
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.MinQty">
            <summary>
            Identifies a minimum quantity order type.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.PercentOffset">
            <summary>
            The percent offset amount for relative orders.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.TrailStopPrice">
            <summary>
            For TRAILLIMIT orders only
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.FAGroup">
            <summary>
            The Financial Advisor group the trade will be allocated to -- use an empty String if not applicable.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.FAProfile">
            <summary>
            The Financial Advisor allocation profile the trade will be allocated to -- use an empty String if not applicable.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.FAMethod">
            <summary>
            The Financial Advisor allocation method the trade will be allocated with -- use an empty String if not applicable.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.FAPercentage">
            <summary>
            The Financial Advisor percentage concerning the trade's allocation -- use an empty String if not applicable.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.OpenClose">
            <summary>
            Specifies whether the order is an open or close order.
            For institutional customers only. Valid values are O, C.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.Origin">
            <summary>
            The order origin.
            </summary>
            <remarks>For institutional customers only.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ShortSaleSlot">
            <summary>
            ShortSaleSlot of Third Party requires DesignatedLocation to be specified. Non-empty DesignatedLocation values for all other cases will cause orders to be rejected.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.DesignatedLocation">
            <summary>
            Use only when shortSaleSlot value = 2.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.DiscretionaryAmt">
            <summary>
            The amount off the limit price allowed for discretionary orders.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ETradeOnly">
            <summary>
            Trade with electronic quotes.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.FirmQuoteOnly">
            <summary>
            Trade with firm quotes.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.NbboPriceCap">
            <summary>
            The maximum Smart order distance from the NBBO.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.AuctionStrategy">
            <summary>
            The auction strategy.
            </summary>
            <remarks>For BOX exchange only.</remarks>
            <seealso cref="P:Krs.Ats.IBNet.Order.AuctionStrategy"/>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.StartingPrice">
            <summary>
            The starting price.
            </summary>
            <remarks>Valid on BOX orders only.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.StockRefPrice">
            <summary>
            The stock reference price.
            </summary>
            <remarks>The reference price is used for VOL orders
            to compute the limit price sent to an exchange (whether or not Continuous
            Update is selected), and for price range monitoring.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.Delta">
            <summary>
            The stock delta.
            </summary>
            <remarks>Valid on BOX orders only.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.StockRangeLower">
            <summary>
            The lower value for the acceptable underlying stock price range.
            </summary>
            <remarks>For price improvement option orders on BOX and VOL orders with dynamic management.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.StockRangeUpper">
            <summary>
            The upper value for the acceptable underlying stock price range.
            </summary>
            <remarks>For price improvement option orders on BOX and VOL orders with dynamic management.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.Volatility">
            <summary>
            What the price is, computed via TWS's Options Analytics.
            </summary>
            <remarks>For VOL orders, the limit price sent to an exchange is not editable,
            as it is the output of a function.  Volatility is expressed as a percentage.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.VolatilityType">
            <summary>
            How the volatility is calculated. 
            </summary>
            <seealso cref="P:Krs.Ats.IBNet.Order.VolatilityType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ContinuousUpdate">
            <summary>
            Used for dynamic management of volatility orders. 
            </summary>
            <remarks>Determines whether TWS is
            supposed to update the order price as the underlying moves.  If selected,
            the limit price sent to an exchange is modified by TWS if the computed price
            of the option changes enough to warrant doing so.  This is very helpful in
            keeping the limit price sent to the exchange up to date as the underlying price changes.</remarks>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ReferencePriceType">
            <summary>
            Used for dynamic management of volatility orders. Set to
            1 = Average of National Best Bid or Ask, or set to
            2 =  National Best Bid when buying a call or selling a put; and National Best Ask when selling a call or buying a put.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.DeltaNeutralOrderType">
            <summary>
            VOL orders only. Enter an order type to instruct TWS to submit a
            delta neutral trade on full or partial execution of the VOL order.
            For no hedge delta order to be sent, specify NONE.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.DeltaNeutralAuxPrice">
            <summary>
            VOL orders only. Use this field to enter a value if  the value in the
            deltaNeutralOrderType field is an order type that requires an Aux price, such as a REL order. 
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.BasisPoints">
            <summary>
            For EFP orders only
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.BasisPointsType">
            <summary>
            For EFP orders only
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ScaleInitLevelSize">
            <summary>
            split order into X buckets
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ScaleSubsLevelSize">
            <summary>
            split order so each bucket is of the size X
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ScalePriceIncrement">
            <summary>
            price increment per bucket
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.Account">
            <summary>
            The account. For institutional customers only.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.SettlingFirm">
            <summary>
            Institutional only.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ClearingAccount">
            <summary>
            Unknown - assume institutional only.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ClearingIntent">
            <summary>
            Unknown - assume institutional only.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.AlgoStrategy">
            <summary>
            Algorithm Strategy
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.AlgoParams">
            <summary>
            List of Algorithm Parameters
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.WhatIf">
            <summary>
            When this value is set to true, margin and commission data is
            received back via a new OrderState() object for the openOrder() callback.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.NotHeld">
            <summary>
            Not Held
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.ExemptCode">
            <summary>
            Exempt Code for Short Sale Exemption Orders
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.Order.OptOutSmartRouting">
            <summary>
            Opt out of smart routing for directly routed ASX orders
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.OrderStatusEventArgs">
            <summary>
            Order Status Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.OrderStatusEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.OrderStatus,System.Int32,System.Int32,System.Decimal,System.Int32,System.Int32,System.Decimal,System.Int32,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="orderId">The order Id that was specified previously in the call to placeOrder().</param>
            <param name="status">The order status.</param>
            <param name="filled">Specifies the number of shares that have been executed.</param>
            <param name="remaining">Specifies the number of shares still outstanding.</param>
            <param name="averageFillPrice">The average price of the shares that have been executed.
            This parameter is valid only if the filled parameter value
            is greater than zero. Otherwise, the price parameter will be zero.</param>
            <param name="permId">The TWS id used to identify orders. Remains the same over TWS sessions.</param>
            <param name="parentId">The order ID of the parent order, used for bracket and auto trailing stop orders.</param>
            <param name="lastFillPrice">The last price of the shares that have been executed. This parameter is valid
            only if the filled parameter value is greater than zero. Otherwise, the price parameter will be zero.</param>
            <param name="clientId">The ID of the client (or TWS) that placed the order.
            The TWS orders have a fixed clientId and orderId of 0 that distinguishes them from API orders.</param>
            <param name="whyHeld">This field is used to identify an order held when TWS is trying to locate shares for a short sell.
            The value used to indicate this is 'locate'.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.OrderStatusEventArgs.#ctor">
            <summary>
             Parameterless OrderStatusEventArgs Constructor for serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.OrderId">
            <summary>
            The order Id that was specified previously in the call to placeOrder().
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.Status">
            <summary>
            The order status.
            </summary>
            <remarks>Possible values include:
            <list type="table">
            <listheader>
            <term>Status</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>PendingSubmit</term>
            <description>indicates that you have transmitted the order, but have not yet received confirmation that it has been accepted by the order destination. This order status is not sent by TWS and should be explicitly set by the API developer when an order is submitted.</description>
            </item>
            <item>
            <term>PendingCancel</term>
            <description>Indicates that you have sent a request to cancel the order but have not yet received cancel confirmation from the order destination. At this point, your order is not confirmed canceled. You may still receive an execution while your cancellation request is pending. This order status is not sent by TWS and should be explicitly set by the API developer when an order is canceled.</description>
            </item>
            <item>
            <term>PreSubmitted</term>
            <description>Indicates that a simulated order type has been accepted by the IB system and that this order has yet to be elected. The order is held in the IB system (and the status remains DARK BLUE) until the election criteria are met. At that time the order is transmitted to the order destination as specified (and the order status color will change).</description>
            </item>
            <item>
            <term>Submitted</term>
            <description>Indicates that your order has been accepted at the order destination and is working.</description>
            </item>
            <item>
            <term>Cancelled</term>
            <description>Indicates that the balance of your order has been confirmed canceled by the IB system. This could occur unexpectedly when IB or the destination has rejected your order.</description>
            </item>
            <item>
            <term>Filled</term>
            <description>The order has been completely filled.</description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:Krs.Ats.IBNet.OrderStatus"/>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.Filled">
            <summary>
            Specifies the number of shares that have been executed.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.Remaining">
            <summary>
            Specifies the number of shares still outstanding.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.AverageFillPrice">
            <summary>
            The average price of the shares that have been executed.
            This parameter is valid only if the filled parameter value
            is greater than zero. Otherwise, the price parameter will be zero.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.PermId">
            <summary>
            The TWS id used to identify orders. Remains the same over TWS sessions.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.ParentId">
            <summary>
            The order ID of the parent order, used for bracket and auto trailing stop orders.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.LastFillPrice">
            <summary>
            The last price of the shares that have been executed. This parameter is valid
            only if the filled parameter value is greater than zero. Otherwise, the price parameter will be zero.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.ClientId">
            <summary>
            The ID of the client (or TWS) that placed the order.
            The TWS orders have a fixed clientId and orderId of 0 that distinguishes them from API orders.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderStatusEventArgs.WhyHeld">
            <summary>
            This field is used to identify an order held when TWS is trying to locate shares for a short sell.
            The value used to indicate this is 'locate'.
            </summary>
            <remarks>This field is supported starting with TWS release 872.</remarks>
        </member>
        <member name="T:Krs.Ats.IBNet.OutgoingMessage">
            <summary>
            Outgoing Message Ids
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.Undefined">
            <summary>
            Undefined Outgoing Message
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestMarketData">
            <summary>
            Request Market Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelMarketData">
            <summary>
            Cancel Market Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.PlaceOrder">
            <summary>
            Place Order
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelOrder">
            <summary>
            Cancel Order
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestOpenOrders">
            <summary>
            Request Open Orders
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestAccountData">
            <summary>
            Request Account Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestExecutions">
            <summary>
            Request Executions
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestIds">
            <summary>
            Request IDS
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestContractData">
            <summary>
            Request Contract Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestMarketDepth">
            <summary>
            Request Market Depth
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelMarketDepth">
            <summary>
            Cancel Market Depth
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestNewsBulletins">
            <summary>
            Request News Bullestins
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelNewsBulletins">
            <summary>
            Cancel News Bulletins
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.SetServerLogLevel">
            <summary>
            Set Server Log Level
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestAutoOpenOrders">
            <summary>
            Request Auto Open Orders
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestAllOpenOrders">
            <summary>
            Request All Open Orders
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestManagedAccounts">
            <summary>
            Request Managed Accounts
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestFA">
            <summary>
            Request Financial Advisor
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.ReplaceFA">
            <summary>
            Replace Financial Advisor
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestHistoricalData">
            <summary>
            Request Historical Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.ExerciseOptions">
            <summary>
            Exercise Options
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestScannerSubscription">
            <summary>
            Request Scanner Subscription
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelScannerSubscription">
            <summary>
            Cancel Scanner Subscription
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestScannerParameters">
            <summary>
            Request Scanner Parameters
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelHistoricalData">
            <summary>
            Cancel Historical Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestCurrentTime">
            <summary>
            Request Current Time
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestRealTimeBars">
            <summary>
            Request Real Time Bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelRealTimeBars">
            <summary>
            Cancel Real Time Bars
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestFundamentalData">
            <summary>
            Request Fundamental Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelFundamentalData">
            <summary>
            Cancel Fundamental Data
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestCalcImpliedVolatility">
            <summary>
            Request Calculated Implied Volatility
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestCalcOptionPrice">
            <summary>
            Request Calculated Option Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelCalcImpliedVolatility">
            <summary>
            Cancel Calculated Implied Volatility
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.CancelCalcOptionPrice">
            <summary>
            Cancel Calculated Option Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestGlobalCancel">
            <summary>
            Request Global Cancel
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.OutgoingMessage.RequestMarketDataType">
            <summary>
            Request Market Data Type
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.OrderState">
            <summary>
            The openOrder() callback with the new OrderState() object will now be invoked
            each time TWS receives commission information for a trade.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.OrderState.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.OrderState.#ctor(Krs.Ats.IBNet.OrderStatus,System.String,System.String,System.String,System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
            Fully Specified Constructor
            </summary>
            <param name="status">Order Status</param>
            <param name="initMargin">Initial margin requirement for the order.</param>
            <param name="maintMargin">Maintenance margin requirement for the order.</param>
            <param name="equityWithLoan"></param>
            <param name="commission"></param>
            <param name="minCommission"></param>
            <param name="maxCommission"></param>
            <param name="commissionCurrency"></param>
            <param name="warningText"></param>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderState.Status">
            <summary>
            Order Status
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderState.InitMargin">
            <summary>
            Initial margin requirement for the order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderState.MaintMargin">
            <summary>
            Maintenance margin requirement for the order.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderState.Commission">
            <summary>
            
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderState.MinCommission">
            <summary>
            
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderState.MaxCommission">
            <summary>
            
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderState.CommissionCurrency">
            <summary>
            
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderState.WarningText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.OrderState.EquityWithLoan">
            <summary>
            
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.Orders.LimitOrder">
            <summary>
            Limit Order is a container.
            In the future this should implement the default members
            of the order class for a limit order.
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.Orders.LimitOrder.#ctor">
            <summary>
            For Future Use
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.RightType">
            <summary>
            Option Right Type (Put or Call)
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.RightType.Put">
            <summary>
            Option type is a Put (Right to sell)
            </summary>
            Description tag used to be "PUT"
        </member>
        <member name="F:Krs.Ats.IBNet.RightType.Call">
            <summary>
            Option type is a Call (Right to buy)
            </summary>
            Description tag used to be "CALL"
        </member>
        <member name="F:Krs.Ats.IBNet.RightType.Undefined">
            <summary>
            Option type is not defined (contract is not an option).
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.ScannerSubscription">
            <summary>
            Scanner Subscription details to pass to Interactive Brokers
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.NumberOfRows">
            <summary>
            Defines the number of rows of data to return for a query.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.Instrument">
            <summary>
            Defines the instrument type for the scan.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.LocationCode">
            <summary>
            The location, currently the only valid location is US stocks.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.ScanCode">
            <summary>
            Can be left blank. 
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.AbovePrice">
            <summary>
            Filter out contracts with a price lower than this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.BelowPrice">
            <summary>
            Filter out contracts with a price higher than this value.
            Can be left blank. 
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.AboveVolume">
            <summary>
            Filter out contracts with a volume lower than this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.AverageOptionVolumeAbove">
            <summary>
            Can leave empty. 
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.MarketCapAbove">
            <summary>
            Filter out contracts with a market cap lower than this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.MarketCapBelow">
            <summary>
            Filter out contracts with a market cap above this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.MoodyRatingAbove">
            <summary>
            Filter out contracts with a Moody rating below this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.MoodyRatingBelow">
            <summary>
            Filter out contracts with a Moody rating above this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.SPRatingAbove">
            <summary>
            Filter out contracts with an SP rating below this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.SPRatingBelow">
            <summary>
            Filter out contracts with an SP rating above this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.MaturityDateAbove">
            <summary>
            Filter out contracts with a maturity date earlier than this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.MaturityDateBelow">
            <summary>
            Filter out contracts with a maturity date later than this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.CouponRateAbove">
            <summary>
            Filter out contracts with a coupon rate lower than this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.CouponRateBelow">
            <summary>
            Filter out contracts with a coupon rate higher than this value.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.ExcludeConvertible">
            <summary>
            Filter out convertible bonds.
            Can be left blank.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.ScannerSettingPairs">
            <summary>
            Can leave empty. For example, a pairing "Annual, true" used on the
            "top Option Implied Vol % Gainers" scan would return annualized volatilities.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.ScannerSubscription.StockTypeFilter">
            <summary>
            ALL (excludes nothing)
            STOCK (excludes ETFs)
            ETF (includes ETFs)
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TickEfpEventArgs">
            <summary>
            Tick EFP Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.TickEfpEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.TickType,System.Double,System.String,System.Double,System.Int32,System.String,System.Double,System.Double)">
            <summary>
            Full Constructor
            </summary>
            <param name="tickerId">The ticker Id that was specified previously in the call to reqMktData().</param>
            <param name="tickType">Specifies the type of price.</param>
            <param name="basisPoints">Annualized basis points, which is representative of the
            financing rate that can be directly compared to broker rates.</param>
            <param name="formattedBasisPoints">Annualized basis points as a formatted string that depicts them in percentage form.</param>
            <param name="impliedFuture">Implied futures price.</param>
            <param name="holdDays">Number of “hold days” until the expiry of the EFP.</param>
            <param name="futureExpiry">Expiration date of the single stock future.</param>
            <param name="dividendImpact">The “dividend impact” upon the annualized basis points interest rate.</param>
            <param name="dividendsToExpiry">The dividends expected until the expiration of the single stock future.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.TickEfpEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickEfpEventArgs.TickerId">
            <summary>
            The ticker Id that was specified previously in the call to reqMktData().
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickEfpEventArgs.TickType">
            <summary>
            Specifies the type of price.
            </summary>
            <seealso cref="P:Krs.Ats.IBNet.TickEfpEventArgs.TickType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.TickEfpEventArgs.BasisPoints">
            <summary>
            Annualized basis points, which is representative of the
            financing rate that can be directly compared to broker rates.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickEfpEventArgs.FormattedBasisPoints">
            <summary>
            Annualized basis points as a formatted string that depicts them in percentage form.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickEfpEventArgs.ImpliedFuture">
            <summary>
            Implied futures price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickEfpEventArgs.HoldDays">
            <summary>
            Number of “hold days” until the expiry of the EFP.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickEfpEventArgs.FutureExpiry">
            <summary>
            Expiration date of the single stock future.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickEfpEventArgs.DividendImpact">
            <summary>
            The “dividend impact” upon the annualized basis points interest rate.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickEfpEventArgs.DividendsToExpiry">
            <summary>
            The dividends expected until the expiration of the single stock future.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TickGenericEventArgs">
            <summary>
            Tick Generic Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.TickGenericEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.TickType,System.Double)">
            <summary>
            Full Constructor
            </summary>
            <param name="tickerId">The ticker Id that was specified previously in the call to reqMktData().</param>
            <param name="tickType">Specifies the type of price.</param>
            <param name="value">The value of the specified field.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.TickGenericEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickGenericEventArgs.TickerId">
            <summary>
            The ticker Id that was specified previously in the call to reqMktData().
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickGenericEventArgs.TickType">
            <summary>
            Specifies the type of price.
            </summary>
            <seealso cref="P:Krs.Ats.IBNet.TickGenericEventArgs.TickType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.TickGenericEventArgs.Value">
            <summary>
            The value of the specified field.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TickOptionComputationEventArgs">
            <summary>
            Tick Option Computation Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.TickOptionComputationEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.TickType,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Full Constructor
            </summary>
            <param name="tickerId">The ticker Id that was specified previously in the call to reqMktData().</param>
            <param name="tickType">Specifies the type of option computation.</param>
            <param name="impliedVol">The implied volatility calculated by the TWS option modeler, using the specificed ticktype value.</param>
            <param name="delta">The option delta calculated by the TWS option modeler.</param>
            <param name="optionPrice">The model price.</param>
            <param name="pvDividend">Present value of dividends expected on the option’s underlier.</param>
            <param name="gamma">Gamma</param>
            <param name="vega">Vega</param>
            <param name="theta">Theta</param>
            <param name="undPrice">Underlying Price</param>
        </member>
        <member name="M:Krs.Ats.IBNet.TickOptionComputationEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.TickerId">
            <summary>
            The ticker Id that was specified previously in the call to reqMktData().
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.TickType">
            <summary>
            Specifies the type of option computation.
            </summary>
            <seealso cref="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.TickType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.ImpliedVol">
            <summary>
            The implied volatility calculated by the TWS option modeler, using the specificed ticktype value.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.Delta">
            <summary>
            The option delta calculated by the TWS option modeler.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.OptionPrice">
            <summary>
            The Option price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.PVDividend">
            <summary>
            Present value of dividends expected on the option’s underlier.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.Gamma">
            <summary>
            Gamma
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.Vega">
            <summary>
            Vega
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.Theta">
            <summary>
            Theta
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickOptionComputationEventArgs.UnderlyingPrice">
            <summary>
            Underlying Price
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TickPriceEventArgs">
            <summary>
            Tick Price Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.TickPriceEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.TickType,System.Decimal,System.Boolean)">
            <summary>
            Full Constructor
            </summary>
            <param name="tickerId">The ticker Id that was specified previously in the call to reqMktData().</param>
            <param name="tickType">Specifies the type of price.</param>
            <param name="price">Specifies the price for the specified field.</param>
            <param name="canAutoExecute">specifies whether the price tick is available for automatic execution.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.TickPriceEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickPriceEventArgs.TickerId">
            <summary>
            The ticker Id that was specified previously in the call to reqMktData().
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickPriceEventArgs.TickType">
            <summary>
            Specifies the type of price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickPriceEventArgs.Price">
            <summary>
            Specifies the price for the specified field.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickPriceEventArgs.CanAutoExecute">
            <summary>
            specifies whether the price tick is available for automatic execution.
            </summary>
            <remarks>Possible values are:
            0 = not eligible for automatic execution
            1 = eligible for automatic execution</remarks>
        </member>
        <member name="T:Krs.Ats.IBNet.TickSizeEventArgs">
            <summary>
            Tick Size Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.TickSizeEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.TickType,System.Int32)">
            <summary>
            Full Constructor
            </summary>
            <param name="tickerId">The ticker Id that was specified previously in the call to reqMktData().</param>
            <param name="tickType">Specifies the type of price.</param>
            <param name="size">Specifies the size for the specified field.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.TickSizeEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickSizeEventArgs.TickerId">
            <summary>
            The ticker Id that was specified previously in the call to reqMktData().
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickSizeEventArgs.TickType">
            <summary>
            Specifies the type of price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickSizeEventArgs.Size">
            <summary>
            Specifies the size for the specified field.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TickStringEventArgs">
            <summary>
            Tick String Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.TickStringEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.TickType,System.String)">
            <summary>
            Free Constructor
            </summary>
            <param name="tickerId">The ticker Id that was specified previously in the call to reqMktData().</param>
            <param name="tickType">Specifies the type of price.</param>
            <param name="value">The value of the specified field.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.TickStringEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickStringEventArgs.TickerId">
            <summary>
            The ticker Id that was specified previously in the call to reqMktData().
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TickStringEventArgs.TickType">
            <summary>
            Specifies the type of price.
            </summary>
            <seealso cref="P:Krs.Ats.IBNet.TickStringEventArgs.TickType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.TickStringEventArgs.Value">
            <summary>
            The value of the specified field.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.SecurityType">
            <summary>
            Contract Security Types
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.Stock">
            <summary>
            Stock
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.Option">
            <summary>
            Option
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.Future">
            <summary>
            Future
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.Index">
            <summary>
            Indice
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.FutureOption">
            <summary>
            FOP = options on futures
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.Cash">
            <summary>
            Cash
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.Bag">
            <summary>
            For Combination Orders - must use combo leg details
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.Bond">
            <summary>
            Bond
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.Warrant">
            <summary>
            Warrant
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.SecurityType.Undefined">
            <summary>
            Undefined Security Type
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TickType">
            <summary>
            Incoming Tick Types
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.BidSize">
            <summary>
            Bid Size
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.BidPrice">
            <summary>
            Bid Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AskPrice">
            <summary>
            Ask Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AskSize">
            <summary>
            Ask Size
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.LastPrice">
            <summary>
            Last Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.LastSize">
            <summary>
            Last Size
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.HighPrice">
            <summary>
            High Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.LowPrice">
            <summary>
            Low Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.ClosePrice">
            <summary>
            Close Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.BidOption">
            <summary>
            Bid Option
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AskOption">
            <summary>
            Ask Option
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.LastOption">
            <summary>
            Last Option
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.ModelOption">
            <summary>
            Model Option
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OpenPrice">
            <summary>
            Open Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.Low13Week">
            <summary>
            Low Price over last 13 weeks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.High13Week">
            <summary>
            High Price over last 13 weeks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.Low26Week">
            <summary>
            Low Price over last 26 weeks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.High26Week">
            <summary>
            High Price over last 26 weeks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.Low52Week">
            <summary>
            Low Price over last 52 weeks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.High52Week">
            <summary>
            High Price over last 52 weeks
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AverageVolume">
            <summary>
            Average Volume
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OpenInterest">
            <summary>
            Open Interest
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OptionHistoricalVolatility">
            <summary>
            Option Historical Volatility
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OptionImpliedVolatility">
            <summary>
            Option Implied Volatility
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OptionBidExchange">
            <summary>
            Option Bid Exchange
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OptionAskExchange">
            <summary>
            Option Ask Exchange
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OptionCallOpenInterest">
            <summary>
            Option Call Open Interest
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OptionPutOpenInterest">
            <summary>
            Option Put Open Interest
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OptionCallVolume">
            <summary>
            Option Call Volume
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OptionPutVolume">
            <summary>
            Option Put Volume
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.IndexFuturePremium">
            <summary>
            Index Future Premium
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.BidExchange">
            <summary>
            Bid Exchange
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AskExchange">
            <summary>
            Ask Exchange
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AuctionVolume">
            <summary>
            Auction Volume
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AuctionPrice">
            <summary>
            Auction Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AuctionImbalance">
            <summary>
            Auction Imbalance
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.MarkPrice">
            <summary>
            Mark Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.BidEfpComputation">
            <summary>
            Bid EFP Computation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AskEfpComputation">
            <summary>
            Ask EFP Computation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.LastEfpComputation">
            <summary>
            Last EFP Computation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.OpenEfpComputation">
            <summary>
            Open EFP Computation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.HighEfpComputation">
            <summary>
            High EFP Computation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.LowEfpComputation">
            <summary>
            Low EFP Computation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.CloseEfpComputation">
            <summary>
            Close EFP Computation
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.LastTimestamp">
            <summary>
            Last Time Stamp
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.Shortable">
            <summary>
            Shortable
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.FundamentalRatios">
            <summary>
            Fundamental Ratios
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.RealTimeVolume">
            <summary>
            Real Time Volume
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.Halted">
            <summary>
            When trading is halted for a contract, TWS receives a special tick: haltedLast=1. When trading is resumed, TWS receives haltedLast=0. A new tick type, HALTED, tick ID = 49, is now available in regular market data via the API to indicate this halted state.
            Possible values for this new tick type are:
            0 = Not halted 
            1 = Halted. 
             </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.BidYield">
            <summary>
            Bond Yield for Bid Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.AskYield">
            <summary>
            Bond Yield for Ask Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.LastYield">
            <summary>
            Bond Yield for Last Price
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.CustOptionComputation">
            <summary>
            returns calculated implied volatility as a result of an calculateImpliedVolatility( ) request.
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.TradeCount">
            <summary>
            Trades
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.TradeRate">
            <summary>
            Trades per Minute
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.VolumeRate">
            <summary>
            Volume per Minute
            </summary>
        </member>
        <member name="F:Krs.Ats.IBNet.TickType.LastRthTrade">
            <summary>
            Last Regular Trading Hours Trade
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.UpdateAccountTimeEventArgs">
            <summary>
            Update Account Time Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateAccountTimeEventArgs.#ctor(System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="timestamp">Current system time on the server side.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateAccountTimeEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateAccountTimeEventArgs.Timestamp">
            <summary>
            Current system time on the server side.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.UpdateAccountValueEventArgs">
            <summary>
            Update Account Value Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateAccountValueEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="key">A string that indicates one type of account value.</param>
            <param name="value">The value associated with the key.</param>
            <param name="currency">Defines the currency type, in case the value is a currency type.</param>
            <param name="accountName">States the account the message applies to. Useful for Financial Advisor sub-account messages.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateAccountValueEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateAccountValueEventArgs.Key">
            <summary>
            A string that indicates one type of account value.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateAccountValueEventArgs.Value">
            <summary>
            The value associated with the key.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateAccountValueEventArgs.Currency">
            <summary>
            Defines the currency type, in case the value is a currency type.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateAccountValueEventArgs.AccountName">
            <summary>
            States the account the message applies to. Useful for Financial Advisor sub-account messages.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.UpdateMarketDepthEventArgs">
            <summary>
            Update Market Depth Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateMarketDepthEventArgs.#ctor(System.Int32,System.Int32,Krs.Ats.IBNet.MarketDepthOperation,Krs.Ats.IBNet.MarketDepthSide,System.Decimal,System.Int32)">
            <summary>
            Full Constructor
            </summary>
            <param name="tickerId">The ticker Id that was specified previously in the call to reqMktDepth().</param>
            <param name="position">Specifies the row Id of this market depth entry.</param>
            <param name="operation">Identifies how this order should be applied to the market depth.</param>
            <param name="side">Identifies the side of the book that this order belongs to.</param>
            <param name="price">The order price.</param>
            <param name="size">The order size.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateMarketDepthEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthEventArgs.TickerId">
            <summary>
            The ticker Id that was specified previously in the call to reqMktDepth().
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthEventArgs.Position">
            <summary>
            Specifies the row Id of this market depth entry.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthEventArgs.Operation">
            <summary>
            Identifies how this order should be applied to the market depth.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.MarketDepthOperation"/>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthEventArgs.Side">
            <summary>
            Identifies the side of the book that this order belongs to.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.MarketDepthSide"/>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthEventArgs.Price">
            <summary>
            The order price.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateMarketDepthEventArgs.Size">
            <summary>
            The order size.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.UpdateNewsBulletinEventArgs">
            <summary>
            Update News Bulletin Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateNewsBulletinEventArgs.#ctor(System.Int32,Krs.Ats.IBNet.NewsType,System.String,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="msgId">The bulletin ID, incrementing for each new bulletin.</param>
            <param name="msgType">Specifies the type of bulletin.</param>
            <param name="message">The bulletin's message text.</param>
            <param name="originExchange">The exchange from which this message originated.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdateNewsBulletinEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateNewsBulletinEventArgs.MsgId">
            <summary>
            The bulletin ID, incrementing for each new bulletin.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateNewsBulletinEventArgs.MsgType">
            <summary>
            Specifies the type of bulletin.
            </summary>
            <seealso cref="T:Krs.Ats.IBNet.NewsType"/>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateNewsBulletinEventArgs.Message">
            <summary>
            The bulletin's message text.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdateNewsBulletinEventArgs.OriginExchange">
            <summary>
            The exchange from which this message originated.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.UpdatePortfolioEventArgs">
            <summary>
            Update Portfolio Event Arguments
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdatePortfolioEventArgs.#ctor(Krs.Ats.IBNet.Contract,System.Int32,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Full Constructor
            </summary>
            <param name="contract">This structure contains a description of the contract which is being traded.
            The exchange field in a contract is not set for portfolio update.</param>
            <param name="position">This integer indicates the position on the contract.
            If the position is 0, it means the position has just cleared.</param>
            <param name="marketPrice">Unit price of the instrument.</param>
            <param name="marketValue">The total market value of the instrument.</param>
            <param name="averageCost">The average cost per share is calculated by dividing your cost
            (execution price + commission) by the quantity of your position.</param>
            <param name="unrealizedPnl">The difference between the current market value of your open positions and the average cost, or Value - Average Cost.</param>
            <param name="realizedPnl">Shows your profit on closed positions, which is the difference between your entry execution cost
            (execution price + commissions to open the position) and exit execution cost ((execution price + commissions to close the position)</param>
            <param name="accountName">The name of the account the message applies to.  Useful for Financial Advisor sub-account messages.</param>
        </member>
        <member name="M:Krs.Ats.IBNet.UpdatePortfolioEventArgs.#ctor">
            <summary>
            Uninitialized Constructor for Serialization
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdatePortfolioEventArgs.Contract">
            <summary>
            This structure contains a description of the contract which is being traded.
            The exchange field in a contract is not set for portfolio update.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdatePortfolioEventArgs.Position">
            <summary>
            This integer indicates the position on the contract.
            If the position is 0, it means the position has just cleared.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdatePortfolioEventArgs.MarketPrice">
            <summary>
            Unit price of the instrument.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdatePortfolioEventArgs.MarketValue">
            <summary>
            The total market value of the instrument.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdatePortfolioEventArgs.AverageCost">
            <summary>
            The average cost per share is calculated by dividing your cost
            (execution price + commission) by the quantity of your position.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdatePortfolioEventArgs.UnrealizedPnl">
            <summary>
            The difference between the current market value of your open positions and the average cost, or Value - Average Cost.
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdatePortfolioEventArgs.RealizedPnl">
            <summary>
            Shows your profit on closed positions, which is the difference between your entry execution cost
            (execution price + commissions to open the position) and exit execution cost ((execution price + commissions to close the position)
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UpdatePortfolioEventArgs.AccountName">
            <summary>
            The name of the account the message applies to.  Useful for Financial Advisor sub-account messages.
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.TagValue">
            <summary>
             Class for storing Algorithm Order Parameters
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.TagValue.#ctor">
            <summary>
             Create a new Tag Value
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.TagValue.#ctor(System.String,System.String)">
            <summary>
             Initialize a Tag Value with values
            </summary>
            <param name="tag">Tag Name</param>
            <param name="value">String Value</param>
        </member>
        <member name="P:Krs.Ats.IBNet.TagValue.Tag">
            <summary>
            Tag Name
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.TagValue.Value">
            <summary>
            Value of Tag
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.UnderComp">
            <summary>
            Underlying Component Class
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.UnderComp.#ctor">
            <summary>
             Instantiate an UnderComp class
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UnderComp.ConId">
            <summary>
            Contract Id
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UnderComp.Delta">
            <summary>
            Delta Value
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UnderComp.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="T:Krs.Ats.IBNet.UnderlyingComponent">
            <summary>
            Underlying Component
            </summary>
        </member>
        <member name="M:Krs.Ats.IBNet.UnderlyingComponent.#ctor">
            <summary>
            Underlying Component
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UnderlyingComponent.ContractId">
            <summary>
            Contract Id
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UnderlyingComponent.Delta">
            <summary>
            Delta
            </summary>
        </member>
        <member name="P:Krs.Ats.IBNet.UnderlyingComponent.Price">
            <summary>
            Price of underlying
            </summary>
        </member>
    </members>
</doc>
